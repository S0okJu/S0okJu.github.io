<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HexaCTF on S0okJu.dev</title><link>https://s0okju.github.io/categories/hexactf/</link><description>Recent content in HexaCTF on S0okJu.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 16 Mar 2025 11:00:00 +0900</lastBuildDate><atom:link href="https://s0okju.github.io/categories/hexactf/index.xml" rel="self" type="application/rss+xml"/><item><title>HexaCTF Awards. 12개의 HexaCTF 글에게 상을 줍시다.</title><link>https://s0okju.github.io/p/hexactf-awards/</link><pubDate>Sun, 16 Mar 2025 11:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-awards/</guid><description>&lt;blockquote>
&lt;p>해당 게시글은 재미를 위해 각종 밈이 포함되어 있습니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="인사말">인사말
&lt;/h2>&lt;p>안녕하세요.&lt;br>
2024년 11월부터 2025년 3월까지 5개월이라는 긴 시간 동안 HexaCTF 시리즈 글이 마무리 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/IMG_0416.gif"
width="480"
height="368"
srcset="https://s0okju.github.io/p/hexactf-awards/IMG_0416_hu_3307d5066aefec83.gif 480w, https://s0okju.github.io/p/hexactf-awards/IMG_0416_hu_fc88ab29be023705.gif 1024w"
loading="lazy"
alt="인사"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>취업하기 전에 글을 마무리하는 것이 목표였는데 달성했네요. 🥹
HexaCTF 시리즈는 제가 프로젝트를 하면서 작성한 글입니다. 그래서 대회를 마친 시점에서 보면 색다르게 느껴집니다. 제 감상을 기반으로 상을 주려고 합니다.&lt;/p>
&lt;h2 id="수상-목록">수상 목록
&lt;/h2>&lt;ul>
&lt;li>설명하기 난감해상&lt;/li>
&lt;li>혼란상&lt;/li>
&lt;li>구성이 아쉽상&lt;/li>
&lt;li>아이디어 실천상&lt;/li>
&lt;li>최선의 선택상&lt;/li>
&lt;/ul>
&lt;h2 id="수상-발표">수상 발표
&lt;/h2>&lt;h3 id="설명하기-난감해상">설명하기 난감해상
&lt;/h3>&lt;p>글로 풀어 쓰기 어려운 글에게 주는 상입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image.png"
width="150"
height="150"
srcset="https://s0okju.github.io/p/hexactf-awards/image_hu_c601999445bb2067.png 480w, https://s0okju.github.io/p/hexactf-awards/image_hu_b86e8f5e00828358.png 1024w"
loading="lazy"
alt="메모장을 열때마다 취하는 행동"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;ul>
&lt;li>👑 Top 1. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-8/" target="_blank" rel="noopener"
>HexaCTF 8. 커스텀 컨트롤러를 통한 Challenge 생성 및 삭제 구현&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>이 부분에서 잠깐 글쓰기를 포기할 뻔 했습니다. Operator 패턴은 클라우드 네이티브 환경에서 많이 쓰이면서 정작 로직 관련 글이 많이 없었습니다. 그래서 제한된 정보를 가지고 글을 써야 했습니다. 확신도 많이 없었구요&amp;hellip; 일단 제가 이해한 내용 기반으로 작성하긴 했지만 나중에 더 깊게 공부하면 수정해야 할 것 같습니다.&lt;/p>
&lt;blockquote>
&lt;p>저에게 정말 큰 좌절감을 안겨줬기 때문에 설명하기 난감해상 1등 자리를 줬습니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-1.png"
width="283"
height="262"
srcset="https://s0okju.github.io/p/hexactf-awards/image-1_hu_11142bd9200d6409.png 480w, https://s0okju.github.io/p/hexactf-awards/image-1_hu_ac2b7f94ef5e16b1.png 1024w"
loading="lazy"
alt="눈물이 끊이지 않음"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;ul>
&lt;li>Top 2. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-11/" target="_blank" rel="noopener"
>HexaCTF 11. 오픈 스택 서버 네트워크 개선기 - 서버에 NIC 2개 삽입한 이유&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>머리 속으로는 그림이 그려지는데 글로 절대 안써집니다. 네트워크 인터페이스인데 NIC로 연결해서 생성된 네트워크 인터페이스와 가상 네트워크 인터페이스도 분리해서 써줘야 합니다.&lt;br>
제일 머리 아픈 것은 같은 사설 IP인데 라우터에서 스위치를 통해 할당받은 IP인지 아니면 가상 네트워크 인터페이스에서 할당된 IP인지 구분하는 것입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-2.png"
width="600"
height="327"
srcset="https://s0okju.github.io/p/hexactf-awards/image-2_hu_5b2c33093b26f54e.png 480w, https://s0okju.github.io/p/hexactf-awards/image-2_hu_4015f5f913a180cf.png 1024w"
loading="lazy"
alt="너무 다양하게 있는거 아니니…"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>그래서 네트워크 관련 글에는 예시가 들어가 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>동일한 네트워크 대역을 가지기 위해 NIC는 &lt;strong>모두 동일한 스위치에 연결&lt;/strong>됩니다. 192.168.50.1/24 대역이라면 서버는 192.168.50.27로 할당받고 Floating IP로도 192.168.50.122 이런 식으로 할당받는 것이죠. 이처럼 &lt;strong>Provider Network는 서버와 동일한 대역의 IP를 가지게 됩니다.&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>제가 글을 쓰면서 느끼는 것은 네트워크 분야는 글이 아니라 그림으로 표현하는게 훨씬 효율적이라는 것입니다. 왜냐하면 블록(범위) 단위로 시스템을 바라보기 때문이죠.&lt;/p>
&lt;blockquote>
&lt;p>머리 속 그림은 그려지지만 적절한 단어 선정과 손이 따라주지 않아서 설명하기 난감해상 2등 자리를 줬습니다.(이게 1등보다 더 열받는 부분일지도&amp;hellip;)&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-3.png"
width="2560"
height="1888"
srcset="https://s0okju.github.io/p/hexactf-awards/image-3_hu_3ab63752428c4920.png 480w, https://s0okju.github.io/p/hexactf-awards/image-3_hu_16e77917b3c0eeb1.png 1024w"
loading="lazy"
alt="마음 속으로는 분노가 차오름"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;h3 id="혼란상">혼란상
&lt;/h3>&lt;p>글 쓰는 당시에도 지금도 혼란스러운 글에게 주는 상입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-4.png"
width="600"
height="412"
srcset="https://s0okju.github.io/p/hexactf-awards/image-4_hu_180309076887bb79.png 480w, https://s0okju.github.io/p/hexactf-awards/image-4_hu_f2e64749b4039e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;ul>
&lt;li>👑 Top 1. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-8/" target="_blank" rel="noopener"
>HexaCTF 8. 커스텀 컨트롤러를 통한 Challenge 생성 및 삭제 구현&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>설명하기 난감해 상과 똑같은 이유입니다. 정보가 많이 없습니다. Kubebuilder 공식 문서에는 &amp;ldquo;너 Operator 패턴 알지?&amp;rdquo; 와 같이 교수님 마인드로 작성되어 있습니다.&lt;br>
그래서 Kubebuilder에서 제시된 키워드를 일리리 검색해서 각각의 컴포넌트가 무슨 역할을 하는지 다 찾아봐야 합니다.&lt;/p>
&lt;p>정보를 찾고 나서 하나로 정리하는 작업이 필요한데, 여기서 머리가 어지러웠습니다.&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;원래는 Builder가 있는데 Kubebuilder 공식 사이트에는 왜 Builder가 없는거지?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Manager는 어떻게 Controller를 만드는거야? 이게 코드로 구현이 가능해?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;왜 누군가는 Operator로 말하고 누군가는 Controller라고 부르는 거야?&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-5.png"
width="637"
height="480"
srcset="https://s0okju.github.io/p/hexactf-awards/image-5_hu_b8f5b703d06583e0.png 480w, https://s0okju.github.io/p/hexactf-awards/image-5_hu_f6c5743565bc062d.png 1024w"
loading="lazy"
alt="뇌세포가 혼란스러워 하는 중"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>원래 시스템 그림을 보고 구현 방식을 어렴풋이 파악하는 편인데, 이번에는 하나도 파악하지 못했습니다. 실제로 KubeBuilder 소스코드 분석을 도전했습니다. 그러나 Go를 제대로 사용한 경험이 없어서 실패하게 되었습니다. Go 공부를 다시 해야겠군요.&lt;/p>
&lt;blockquote>
&lt;p>저에게 영원한 혼란스러움을 안겨줘 혼란상 1등을 줬습니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-6.png"
width="200"
height="200"
srcset="https://s0okju.github.io/p/hexactf-awards/image-6_hu_7153e300deb96637.png 480w, https://s0okju.github.io/p/hexactf-awards/image-6_hu_43e187b49bc013bf.png 1024w"
loading="lazy"
alt="벙~~"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h3 id="구성이-아쉽상">구성이 아쉽상
&lt;/h3>&lt;p>구성이 아쉬운 글에게 주는 상입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-7.png"
width="430"
height="357"
srcset="https://s0okju.github.io/p/hexactf-awards/image-7_hu_7368ce7e47bc2039.png 480w, https://s0okju.github.io/p/hexactf-awards/image-7_hu_d9fc037330dae8ad.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="289px"
>&lt;/p>
&lt;ul>
&lt;li>👑 Top 1. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-1/" target="_blank" rel="noopener"
>HexaCTF - 1. 인프라 플랫폼 선정과 서버 이전 시 마주한 문제&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vlan 네트워크 구성한 이유와 실패했지만 그 대신 어떻게 했는지 설명했으면 괜찮은 글이라고 생각합니다. 그러나 글만 보면 선택의 이유가 명확해 보이지 않습니다.&lt;br>
글 작성 시점이 5개월 전이라 저때 당시 무슨 기준점을 가지고 저런 선택을 했는지 기억이 나지 않습니다.&lt;/p>
&lt;blockquote>
&lt;p>대체 내가 무슨 생각으로 저 글을 썼는지 의문이 가서 구성이 아쉽상 1등을 드립니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-8.png"
width="529"
height="320"
srcset="https://s0okju.github.io/p/hexactf-awards/image-8_hu_c66d84551a2613e3.png 480w, https://s0okju.github.io/p/hexactf-awards/image-8_hu_298408eaad98a39f.png 1024w"
loading="lazy"
alt="어?"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;ul>
&lt;li>Top 2. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-3/" target="_blank" rel="noopener"
>HexaCTF - 3. Jenkins를 활용한 CI 환경 구성하기&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>저희 프로젝트에서는 Jenkins를 두 가지 이유로 사용됩니다. 하나는 CTF에 출제할 문제의 이미지를 빌드하기 위해 하나는 CTF 웹 애플리케이션 이미지를 빌드하기 위해 사용됩니다. 글 작성 당시에는 저것까지 생각을 안하고 글을 쓴 것 같다는 생각이 듭니다.&lt;/p>
&lt;blockquote>
&lt;p>젠킨스 사용 목적에 대해 명확하게 작성하지 않았으므로 구성이 아쉽상 2등을 드립니다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>Top 3. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-7/" target="_blank" rel="noopener"
>HexaCTF 7. Challenge CR 상태 정의와 Operator 개념 정리&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Challenge CR 글을 작성하다가 갑자기 Operator의 개념이 나온 글입니다. 이때의 감정은 아직도 생생한데요. 본래 계획이라면 Challenge CR를 설명하고 HexaCTF 8에서 설명한 내용을 정리할 예정이었습니다.&lt;br>
그러나 글로 서술하는 과정에서 &lt;strong>&amp;ldquo;Operator는 근본적으로 무엇을 만드는거지?&amp;rdquo;&lt;/strong> 라는 의문점을 가지게 되었고, 쿠버네티스 시스템 관점에서 Operator의 개념에 대해 작성하게 되었습니다.&lt;/p>
&lt;blockquote>
&lt;p>거의 의식의 흐름으로 글을 전개했으므로 구성이 아쉽상 3등을 드립니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-9.png"
width="911"
height="720"
srcset="https://s0okju.github.io/p/hexactf-awards/image-9_hu_6afcad397687233.png 480w, https://s0okju.github.io/p/hexactf-awards/image-9_hu_59b93b0c1667e0dd.png 1024w"
loading="lazy"
alt="난.장.판"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;h3 id="아이디어-실천상">아이디어 실천상
&lt;/h3>&lt;p>나름 만족한 아이디어를 실천한 글에게 주는 상입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-10.png"
width="800"
height="638"
srcset="https://s0okju.github.io/p/hexactf-awards/image-10_hu_8fd174b6f7b3057b.png 480w, https://s0okju.github.io/p/hexactf-awards/image-10_hu_6f6e7d93482c65c4.png 1024w"
loading="lazy"
alt="흡족"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/p>
&lt;ul>
&lt;li>👑 Top 1. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-6/" target="_blank" rel="noopener"
>HexaCTF 6. Kubebuilder를 활용한 ChallengeDefinition&amp;amp;Challenge Type 구현&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Challenge 구조를 설계할 당시 AWS SysOps 자격증을 준비하고 있었습니다. CloudFormation 범위를 중심으로 공부하고 있었는데, &lt;strong>&amp;ldquo;Template이라는 개념을 프로젝트에 대입할 수 있을까?&amp;rdquo;&lt;/strong> 라는 생각이 들었고 직접 적용하기로 결심했습니다.&lt;br>
지금은 ChallengeDefinition이지만 초기 이름은 ChallengeTemplate이었습니다. 자주 사용하는 플랫폼 구성을 작은 Template으로 구성하여 CloudFormation 처럼 여러 개의 Template를 참조할 수 있도록 설계했습니다. 그렇다면 사용자는 사용할 템플릿과 필요한 소수의 정보만으로 Challenge를 생성할 수 있게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-11.png"
width="811"
height="521"
srcset="https://s0okju.github.io/p/hexactf-awards/image-11_hu_173218540e9de991.png 480w, https://s0okju.github.io/p/hexactf-awards/image-11_hu_425c4174e0dc03cc.png 1024w"
loading="lazy"
alt="초기 ChallengeDefinition 구성 - ChallengeTemplate"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>그런데 중간 점검에 팀원과 상의하는 과정에서 이러한 방식은 사용자에게 오히려 혼란을 야기할 수 있다는 의견을 받았습니다. 의견을 일부 수용하여 구성 파일에는 쿠버네티스 구성 형식을 따르기로 결정했고 ChallengeTemplate 대신 ChallengeDefinition으로 이름을 바꾸게 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>아이디어를 직접 구현한 것과 더불어 아이디어에 서사가 있어 아이디어 실천상 1등을 드립니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-12.png"
width="1024"
height="586"
srcset="https://s0okju.github.io/p/hexactf-awards/image-12_hu_6cbbca9d4fafe287.png 480w, https://s0okju.github.io/p/hexactf-awards/image-12_hu_7eda853a1be3ac09.png 1024w"
loading="lazy"
alt="오?!"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;ul>
&lt;li>Top 2. &lt;a class="link" href="https://s0okju.github.io/p/hexactf-10/#control-api-operator-%EC%82%AC%EC%9D%B4%EC%97%90-%ED%81%90%EB%A5%BC-%EB%91%94-%EC%9D%B4%EC%9C%A0" target="_blank" rel="noopener"
>HexaCTF 10. 아키텍쳐 설계 및 Challenge Control API 제작&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Challenge API를 별도로 생성하여 기존의 쿠버네티스 요청 방식이 아닌 독자적인 규격으로 생성을 요청할 수 있도록 구현했습니다. 즉 json 3개의 키-값만으로 하나의 Challenge를 만들 수 있는 것이죠.&lt;/p>
&lt;blockquote>
&lt;p>Challenge API와 Operator를 활용하여 Challenge만의 독자적인 오케스트레이터를 만들었으므로 아이디어 실천상 2등을 드립니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="최선의-선택상">최선의 선택상
&lt;/h3>&lt;ul>
&lt;li>👑 공동 Top 1. HexaCTF의 모든 글들&lt;/li>
&lt;/ul>
&lt;p>시간 차를 두고 글을 쓰다 보면 &amp;ldquo;왜 나는 이런 선택을 했지?&amp;rdquo; 라는 생각을 하곤 합니다. 냉정한 평가는 뒤로 미루고 &lt;strong>그때의 선택이 최선이었음을 인정하는 것도 중요하다고 생각합니다.&lt;/strong>&lt;/p>
&lt;p>부족한 부분이 있으면 앞으로 고치면 되니까요. 😄&lt;/p>
&lt;blockquote>
&lt;p>스스로에게 고생했다는 의미에서 HexaCTF의 모든 글에게 최선의 선택상을 드리겠습니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/i-did-best-i-could.gif"
width="220"
height="176"
srcset="https://s0okju.github.io/p/hexactf-awards/i-did-best-i-could_hu_2ea5e7eee55ebb9.gif 480w, https://s0okju.github.io/p/hexactf-awards/i-did-best-i-could_hu_d9c973959770fa10.gif 1024w"
loading="lazy"
alt="그때는 최선의 선택이었다."
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/p>
&lt;h2 id="수상-소감">수상 소감
&lt;/h2>&lt;p>모든 글이 잘 썼다는 것이 아닙니다. 오히려 아쉬운 점을 나열하라고 하면 블로그로 몇편을 더 쓸 수 있을 것 같습니다.&lt;br>
본래 글쓰기를 잘하는 편이 아니지만 서투른 필력으로 13편(12 + 후기)을 작성한 건 나름 자랑스럽습니다.&lt;br>
이렇게 꾸준히 하다보면 저의 실력도 글쓰기 실력도 늘어나겠죠.&lt;/p>
&lt;p>HexaCTF 시리즈 끝.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-awards/image-13.png"
width="563"
height="315"
srcset="https://s0okju.github.io/p/hexactf-awards/image-13_hu_fc563c5879620644.png 480w, https://s0okju.github.io/p/hexactf-awards/image-13_hu_3e29b70515ccc0b5.png 1024w"
loading="lazy"
alt="끝."
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p></description></item><item><title>HexaCTF 12. 쿠버네티스 멀티 노드 선정 이유와 웹 애플리케이션 배포 회고</title><link>https://s0okju.github.io/p/hexactf-12/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-12/</guid><description>&lt;p>이제부터 워커 노드를 2개 선정한 이유와 쿠버네티스에 웹 애플리케이션을 배포하면서 느낀점을 작성하겠습니다.&lt;/p>
&lt;h2 id="쿠버네티스-워커-노드-구성">쿠버네티스 워커 노드 구성
&lt;/h2>&lt;p>초기에 저는 사용자가 배포한 Challenge만의 독립적인 환경이 필요했습니다. 그래서 워커 노드를 2개 설치한 후 &lt;code>nodeSelector&lt;/code>를 활용하여 애플리케이션 역할에 따라 각 노드에 배치될 수 있도록 구성했습니다.&lt;br>
하나의 워커 노드에 웹 애플리케이션과 기타 모니터링 도구를 배치하고 다른 하나에는 Challenge 서버만 배치하도록 설계했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-12/image.png"
width="601"
height="281"
srcset="https://s0okju.github.io/p/hexactf-12/image_hu_138392bc5d04347.png 480w, https://s0okju.github.io/p/hexactf-12/image_hu_a8338b3dd0369a20.png 1024w"
loading="lazy"
alt="워커 노드 애플리케이션 배치도"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="513px"
>&lt;/p>
&lt;h3 id="질문-1-왜-워커-노드가-3개가-아닌가요">질문 1. 왜 워커 노드가 3개가 아닌가요?
&lt;/h3>&lt;p>아래의 질문을 할 수 있을 것 같습니다.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;프로그램 역할에 따라 노드 별로 배치한다고 하셨잖아요. 그렇다면 노드 3개 배포해야 하는 것 아닌가요? &amp;quot;&lt;/p>&lt;/blockquote>
&lt;p>위의 질문은 옳은 말이지만 &lt;strong>서버 리소스가 부족&lt;/strong>하여 노드 3개를 배포하지 못했습니다.
쿠버네티스는 배포할때 Kubespray 플랫폼을 활용합니다. Kubespray에 워커 노드를 배포할때는 모두 동일한 이미지와 리소스 타입이 적용됩니다. 워커 노드에 이미지를 ubuntu:20.04에 리소스 타입으로 2vCPU, 4GB로 선택했다면 워커 노드 모두 동일하게 적용되는 것이죠.&lt;/p>
&lt;h4 id="쿠버네티스-인스턴스에-배치된-리소스-양">쿠버네티스 인스턴스에 배치된 리소스 양
&lt;/h4>&lt;blockquote>
&lt;p>워커 노드는 메모리 선정 기준이 확실히 있었으나 나머지는&lt;a class="link" href="https://docs.kublr.com/installation/hardware-recommendation/" target="_blank" rel="noopener"
> kublr에서 제시한 기준표&lt;/a>의 2배를 산정해서 생성했습니다. 넉넉하면 좋지 않을까 하는 마음으로 리소스를 늘렸던 것 같습니다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>마스터 노드 : 4vCPU, 8GB&lt;/li>
&lt;li>워커 노드: 8vCPU, 16GB&lt;/li>
&lt;/ul>
&lt;p>그러나 실제 하드웨어는 64GB의 메모리를 가지고 있으며 Jenkins, NFS 서버, OpenStack 서버의 메모리 양을 고려했을때 워커 노드를 3개를 배치할 수 없었습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-12/image-1.png"
width="811"
height="170"
srcset="https://s0okju.github.io/p/hexactf-12/image-1_hu_6ff0a98be6b391d8.png 480w, https://s0okju.github.io/p/hexactf-12/image-1_hu_cca59a81745b2c66.png 1024w"
loading="lazy"
alt="오픈 스택 컴퓨팅 리소스 잔여량"
class="gallery-image"
data-flex-grow="477"
data-flex-basis="1144px"
>&lt;/p>
&lt;h3 id="질문-2-워커-노드의-메모리를-16gb로-선택한-이유">질문 2. 워커 노드의 메모리를 16GB로 선택한 이유
&lt;/h3>&lt;blockquote>
&lt;p>CPU는 연산할때 주로 많이 쓰이는 리소스입니다. 그러나 CTF 대회 문제 중에서 연산 집중적인 문제가 큰 비중을 차지하지 않습니다. 전반적으로 CPU 사용량이 무난하다고 판단해 추가적인 CPU 사용 기준을 설정하지 않았습니다.&lt;/p>&lt;/blockquote>
&lt;p>Challenge의 최대 사용량을 계산했을때 16GB 메모리가 적당하다고 생각하고 있습니다.&lt;/p>
&lt;p>출제할 문제의 베이스 이미지는 쿠버네티스 클러스터를 배포할 때 알 수 없습니다. 미리 예측해서 배포해야 합니다. 그러므로 최대 사용 가능한 컴퓨팅 자원량을 계산하여 자원 부족으로 인해 문제가 발생하지 않도록 설계해야 했습니다.&lt;/p>
&lt;p>&lt;strong>Challenge 문제에 쿠버네티스 limit quota를 활용해 리소스의 최대 사용량을 설정할 것입니다. 이 정도를 토대로 총 예상 사용량을 계산하기로 결정했습니다.&lt;/strong>&lt;/p>
&lt;h4 id="challenge-서버의-특징">Challenge 서버의 특징
&lt;/h4>&lt;p>Challenge 서버는 &lt;strong>특정 기능 하나만 구현되어 있어 단순하다는 특징&lt;/strong>을 가지고 있습니다. 또한 한명만 서버에 접속할 수 있죠.
CPU, 메모리 활용 관점에서 예측하면 다음과 같습니다.&lt;/p>
&lt;ol>
&lt;li>CPU - 빌드 초기에 많이 쓰인다. 그 이외에는 무난할 것 같다.&lt;/li>
&lt;li>메모리 - 메모리 상한선이 정해져 있을 것 같다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://s0okju.github.io/p/hexactf2025-review/" target="_blank" rel="noopener"
>실제 대회를 운영하면서&lt;/a> 예상한 패턴이 어느정도 맞긴 했습니다.&lt;/p>&lt;/blockquote>
&lt;h4 id="메모리-사용량만-고려한-이유">메모리 사용량만 고려한 이유
&lt;/h4>&lt;p>우선 CPU는 선정 기준을 아직까지도 감을 찾지 못했습니다. 🥹 이건 실무에서 한번 배우고 싶네요.&lt;/p>
&lt;p>메모리는 CPU과 다르게 초기에 데이터를 적재한 후에 실행되는 특징을 가지고 있습니다. CPU가 사용 후 바로 반납하는 느낌이라면 메모리는 누적의 느낌이 강합니다.(개인적인 생각입니다.)
메모리는 관리를 제대로 하지 않으면 빨리 소모되는 자원인 셈이죠. 그러므로 limit, request quota로 사용 가능한 최대 메모리 용량를 지정하여 불필요한 사용량을 줄이는 것이 중요하다고 생각했습니다.&lt;/p>
&lt;h4 id="예상-사용-메모리-용량-계산">예상 사용 메모리 용량 계산
&lt;/h4>&lt;p>Challenge를 활용하는 CTF 문제는 주로 Web, System입니다. System은 가벼운 리눅스 이미지를 활용하며 자원 사용량의 편차가 크지 않습니다. 반면 Web의 경우에는 어떤 이미지를 활용했냐에 따라 편차가 매우 큽니다. 그러므로 상한선을 선택할 때는 스프링부트 플랫폼의 평균 메모리 사용량 256MB를 기준으로 계산했습니다.&lt;/p>
&lt;blockquote>
&lt;p>256MB(스프링부트 기준 메모리 양) x 3(사용자 당 동시 실행 컨테이너 수) x 20(사용자) = 15GB&lt;/p>&lt;/blockquote>
&lt;p>15GB는 제가 생각한 최대 메모리 사용량이라고 생각합니다. 사용자 수가 2배, 3배로 크게 증가하지 않는 한 예상 범위 내로 메모리를 활용할 것으로 보입니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>여담&lt;/strong>
System 문제와 Web 문제의 메모리 사용량은 2배 ~ 4배 차이로 상당히 큽니다. 대회마다 문제 양과 유형이 크게 변화하지 않기 때문에 메모리 사용량을 비율로 계산할까 고민했습니다.
실제 대회에 참가한 친구들에게 물어보니 Web 문제에 가장 많이 도전하고 시간 투자를 많이 한다고 합니다. 그래서 Web 문제의 최대 메모리 사용량을 기준으로 선택했습니다.&lt;/p>&lt;/blockquote>
&lt;h4 id="challenge-request-limit-quota">Challenge request, limit quota
&lt;/h4>&lt;p>저는 모든 Challenge의 Deployment에 아래와 같은 resource quota를 설정했습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">limits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;500m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;512Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;250m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;256Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>왜 최대 사용량을 256MB으로 지정했으면서 실제로는 512MB로 선정했는지 궁금하셨을 것 같습니다.&lt;/p>
&lt;blockquote>
&lt;p>왜 DevOps, SRE가 개발 경험이 있어야 하는지 뼈저리게 느꼈습니다. 경험이 없으니 전반적으로 감을 잡을 수 없었습니다.&lt;/p>&lt;/blockquote>
&lt;p>Challenge 서버에서 기능은 하나 뿐이고 사용자도 실질적으로 한명이기 때문에 리소스 사용량이 크게 변하지 않을 것이라고 생각했습니다. 그런데 눈으로 직접 보지 않는 이상 모르겠다는 생각을 했습니다.&lt;br>
마침 참여가 확정된 사용자는 예상보다 적어서 사용 패턴을 확인할 겸 limit를 512MB로 선정하게 되었습니다.&lt;/p>
&lt;h2 id="쿠버네티스-hexactf-서비스-아키텍처-설계-및-회고">쿠버네티스 HexaCTF 서비스 아키텍처 설계 및 회고
&lt;/h2>&lt;p>웹 애플리케이션은 hexactf라는 네임 스페이스에 배포했습니다.
hexactf 내에 있는 애플리케이션은 모두 하나의 Helm으로 배포했습니다.&lt;/p>
&lt;blockquote>
&lt;p>Operator 배포 방식에 대한 자세한 내용은 &lt;a class="link" href="https://s0okju.github.io/p/hexactf-9/" target="_blank" rel="noopener"
>HexaCTF9&lt;/a>를 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>눈썰미 좋으신 분들은 알겠지만 Queue 또한 메세지를 저장해야 하므로 Statefulset으로 배포해야 합니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-12/image-2.png"
width="624"
height="241"
srcset="https://s0okju.github.io/p/hexactf-12/image-2_hu_c3a21299daae4a6d.png 480w, https://s0okju.github.io/p/hexactf-12/image-2_hu_f07ed3800517c945.png 1024w"
loading="lazy"
alt="쿠버네티스 HexaCTF 애플리케이션 구성도"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="621px"
>&lt;/p>
&lt;h3 id="아쉬운-점">아쉬운 점
&lt;/h3>&lt;p>가장 아쉬운 점은 모든 애플리케이션을 하나의 Helm으로 배포한 것입니다.&lt;/p>
&lt;ol>
&lt;li>데이터베이스&lt;/li>
&lt;/ol>
&lt;p>운영하면서 DB에 진짜 오류가 많았습니다. &lt;code>kubectl logs&lt;/code> 로 매일 문제점을 파악했는데요. 로그만으로는 명확한 원인은 파악할 수 없었지만 &lt;a class="link" href="https://hiwony.tistory.com/85" target="_blank" rel="noopener"
>InterfaceError가 빈번하게 나타나는 것을 보아 Connection leak 문제라고 생각했습니다. &lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pymysql.err.InterfaceError: (0, &amp;#39;&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그래서 문제의 근거를 찾고자 Prometheus의 ServiceMonitor 연결을 시도했으나 실패했습니다. 시간이 없어서 끝까지 해보지는 못했습니다.&lt;br>
대회가 끝나고 다시 생각해보니 Operator로 MariaDB를 따로 배포하면 좋지 않았을까 하는 아쉬움이 있습니다. 내부적으로 모니터링 기능을 쉽게 설정할 수 있으며 상황에 따라서 확장과 관리가 용이하기 때문입니다.&lt;/p>
&lt;ol start="2">
&lt;li>큐&lt;/li>
&lt;/ol>
&lt;p>사진에는 Queue라고 적었지만 정확하게 Kafka입니다.&lt;/p>
&lt;blockquote>
&lt;p>Kafka를 선정한 이유는 한번이라도 써보고 싶었기 때문입니다. ^-^! 쓰고 나서 후회했습니다.&lt;/p>&lt;/blockquote>
&lt;p>눈썰미가 좋으신 분들은 알고 계셨겠지만 Queue 또한 StatefulSet으로 배포해야 합니다. 큐에는 메세지가 저장되어 있기 때문에 상태를 저장해야 하기 때문입니다.&lt;br>
프로젝트에서는 운이 좋게도 큐에 문제가 생기지 않아 데이터 유실이 되지 않았습니다. 그러다 대회를 마무리하고 나서 보니 배포 리소스를 잘못 설정했다는 것을 깨닫게 되었습니다.&lt;/p>
&lt;p>Queue도 프로젝트의 Helm으로 관리하는 것이 아닌 분리해서 Operator로 관리하는 것이 좋다고 생각했습니다. 데이터베이스와 동일한 이유로 확장과 관리가 용이하기 때문입니다.&lt;/p>
&lt;h2 id="배포-프로세스-회고">배포 프로세스 회고
&lt;/h2>&lt;h3 id="작은-일도-수작업은-힘들다">작은 일도 수작업은 힘들다.
&lt;/h3>&lt;p>프로젝트 당시 &lt;strong>자동화는 하나도 하지 않고 수작업으로 변경사항을 일리리 확인하고 빌드하고 배포&lt;/strong>했습니다.&lt;/p>
&lt;p>젠킨스 서버는 존재합니다. 그런데 주요 목적은 &lt;strong>수동&lt;/strong>으로 HexaCTF 웹 애플리케이션, Challenge 이미지를 빌드하여 이미지 레지스트리에 전송하는 용도였습니다.&lt;/p>
&lt;p>초기에는 프로젝트가 소규모이므로 CI/CD는 필요없다는 의견이 대다수였습니다. 저도 어느 정도 동의했으며 한 사람(본인)이 모든 배포 프로세스를 수용할 수 있을 것이라고 생각했습니다.&lt;/p>
&lt;p>대회 일주일 전에 git pull, helm upgrade 명령어만 무한 반복으로 치니 다양한 생각이 들었습니다.&lt;/p>
&lt;ul>
&lt;li>Helm으로 동시에 배포했는데 애플리케이션 하나는 이전 버전으로 롤백하고 다른 애플리케이션은 업그레이드 버전을 활용해야 하는 경우 -&amp;gt; 하나로 배포하는게 아니라 팀 단위로 쪼개서 CI/CD 쓸걸&lt;/li>
&lt;li>Helm upgrade 했는데 빌드 과정을 생략하여 변경 사항이 반영되지 않은 경우 -&amp;gt; 젠킨스로 이미지를 자동으로 빌드할걸&lt;/li>
&lt;li>branch를 잘못 설정했으면서 수동으로 빌드하기 눌러 구버전으로 이미지 빌드하기 -&amp;gt; 젠킨스로 이미지를 자동으로 빌드했으면 내가 브랜치를 잘못 썼다는 걸 알았을텐데&lt;/li>
&lt;li>helm 파일 수정본이 반영되지 않는 경우 -&amp;gt; ArgoCD 쓸걸&lt;/li>
&lt;li>문제 발생 시 팀원에게 직접 알리기 -&amp;gt; CI/CD에 있는 알림 기능을 활용할걸&lt;/li>
&lt;li>기타 등등 &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>휴먼 이슈로 인해 예상보다 문제는 많았고 자동화를 안한 것을 뼈저리게 후회했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-12/image-3.png"
width="400"
height="300"
srcset="https://s0okju.github.io/p/hexactf-12/image-3_hu_76fcfbc179472712.png 480w, https://s0okju.github.io/p/hexactf-12/image-3_hu_49815617fdd2ab21.png 1024w"
loading="lazy"
alt="Challenge Operator, API 버그 수정하고 또 … 살려줘"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>웹 애플리케이션 배포에 대해 기술적으로 작성할만한 것은 없었습니다. 자동화라는 좋은 시스템을 버리고 선사 시대의 방식으로 수행했으니까요. 그만큼 몸소 느낀점이 많으며 제목도 배포가 아닌 &amp;ldquo;회고&amp;quot;로 지은 것 같습니다.&lt;/p>
&lt;p>이제 기술적인 내용은 끝입니다. 5개월 끝에 드디어 글을 모두 작성할 수 있었네요.&lt;br>
다음에 &amp;ldquo;HexaCTF 시리즈 어워드&amp;quot;를 마지막으로 시리즈를 마치겠습니다.&lt;/p></description></item><item><title>HexaCTF 11. 오픈 스택 서버 네트워크 개선기 - 서버에 NIC 2개 삽입한 이유</title><link>https://s0okju.github.io/p/hexactf-11/</link><pubDate>Fri, 14 Mar 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-11/</guid><description>&lt;ul>
&lt;li>2025-03-15 - 내용 수정&lt;/li>
&lt;/ul>
&lt;h2 id="들어가며">들어가며
&lt;/h2>&lt;p>간략한 인프라 구성도입니다.&lt;/p>
&lt;p>여기서 눈에 띄는 점이 2가지가 있습니다.&lt;/p>
&lt;ol>
&lt;li>한 서버(OpenStack)에 NIC가 2개&lt;/li>
&lt;li>일부 사용자는 VPN 사용하여 접속한다&lt;/li>
&lt;/ol>
&lt;p>이제부터 왜 오픈스택 서버에 2개의 NIC를 삽입했는지 설명하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image.png"
width="662"
height="362"
srcset="https://s0okju.github.io/p/hexactf-11/image_hu_21f73670fe72963c.png 480w, https://s0okju.github.io/p/hexactf-11/image_hu_3118b1722d6421d4.png 1024w"
loading="lazy"
alt="인프라 구성도"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;h2 id="nic-1개-삽입-시-문제점">NIC 1개 삽입 시 문제점
&lt;/h2>&lt;p>OpenStack은 기본적으로 2개의 네트워크 인터페이스가 요구됩니다. 그래서 설치가 비교적 간단한 DevStack이든 kolla-ansible이든 &lt;strong>하나의 물리적 NIC로만 구성한다면 운영체제에서 하나의 논리적 네트워크 인터페이스를 만들어서 설정해야 합니다.&lt;/strong>&lt;br>
하나의 NIC로만 구성하면 172.24.4.0/24(상황에 따라 다름)와 같은 네트워크 인터페이스를 생성하여 Provider Network를 구성하게 됩니다. 그러나 &lt;strong>Provider Network로부터 IP를 사설 IP(172.24.4.x)로 할당받으므로 외부 컴퓨터(Manager)에서 직접 접근할 수 없습니다.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image-1.png"
width="735"
height="658"
srcset="https://s0okju.github.io/p/hexactf-11/image-1_hu_25510a72ccace2c7.png 480w, https://s0okju.github.io/p/hexactf-11/image-1_hu_d278d82f08a022b.png 1024w"
loading="lazy"
alt="NIC 1개 구성 시 문제점 - Provider Network에 직접 접근할 수 없음"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>결국 Floating IP가 할당된 가상머신에 접근하기 위해서는 서버 내에 NAT 설정을 해야 합니다.&lt;/p>
&lt;p>실제 프로젝트에서는 Provider Network를 물리 네트워크 인터페이스에 연결시키고 Management Network는 논리 네트워크 인터페이스로 연결했습니다. 즉 Floating IP를 &lt;code>192.168.50.x&lt;/code>로 할당을 받을 것이며 아무런 라우팅 설정 없이 직접 접근할 수 있도록 구성했습니다. 왜냐하면 Management Network에서는 하나의 IP만 활용되지만, 많은 가상 머신을 만들면서 Provider Network를 통해 2개 이상의 IP가 필요하기 때문입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image-2.png"
width="575"
height="620"
srcset="https://s0okju.github.io/p/hexactf-11/image-2_hu_fb9fbc23e1f2b3cc.png 480w, https://s0okju.github.io/p/hexactf-11/image-2_hu_804e497bef8f64f4.png 1024w"
loading="lazy"
alt="NIC 1개 구성 - 라우팅 설정이 필요함"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="222px"
>&lt;/p>
&lt;p>대신 서버의 IP로 구성된 Resource API에 접근하기 위해서는 별도의 라우팅 설정이 요구됩니다. 라우팅 설정하는 방법은 크게 두 가지입니다.&lt;/p>
&lt;ol>
&lt;li>라우터에 라우팅 규칙 설정&lt;/li>
&lt;li>클라이언트(Manager), 서버의 라우팅 테이블 수정&lt;/li>
&lt;/ol>
&lt;h3 id="1-라우터에-라우팅-규칙-설정의-문제점">1. 라우터에 라우팅 규칙 설정의 문제점
&lt;/h3>&lt;blockquote>
&lt;p>그곳에는 많은 서버들이 있다.&lt;/p>&lt;/blockquote>
&lt;p>서버가 있는 장소가 제 것만 있으면 1번은 당연한 선택지일 것입니다. 그러나 제 서버 이외에도 다른 사람들의 서버가 있으며 그것들 또한 가상화 솔루션 서버로 이뤄져 있습니다.
공용으로 사용되는 라우터에 라우팅 테이블을 설정하면 문제가 하나 발생하게 됩니다. &lt;strong>다른 서버 이용자가 의도치 않게 OpenStack의 사설 네트워크와 동일한 IP에 접속을 요청하면 OpenStack 서버로 패킷이 전송되는 문제가 발생할 수 있습니다.&lt;/strong>&lt;/p>
&lt;p>실제 경험해보지 않았지만 제가 예상한 문제 시나리오는 크게 두 가지 입니다.&lt;/p>
&lt;ol>
&lt;li>다른 사용자(User2) 가 자신의 서버에 접근을 요청할 경우&lt;/li>
&lt;li>다른 사용자가 User 2의 서버에 접속하여 가상 머신에 접근을 요청할 경우&lt;/li>
&lt;/ol>
&lt;p>시나리오의 모든 전제 조건은 라우팅 테이블의 최고 우선순위가 default(0.0.0.0) -&amp;gt; 라우터 게이트웨이인 경우 입니다. &lt;strong>다시 말해 라우팅 테이블의 우선순위를 수정하면 아래의 문제는 어느 정도 해소할 수 있습니다.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image-3.png"
width="570"
height="762"
srcset="https://s0okju.github.io/p/hexactf-11/image-3_hu_6d087047adf6057f.png 480w, https://s0okju.github.io/p/hexactf-11/image-3_hu_3f38e9d663e1b2a7.png 1024w"
loading="lazy"
alt="IP 주소 충돌 시나리오 2가지"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="179px"
>&lt;/p>
&lt;p>그러나 4~5대의 각 서버 사용자에게 연락을 드려 일리리 조사를 하는 것도 여간 번거로운 일이 아닙니다. 그래서 다른 방법을 생각해야 합니다.&lt;/p>
&lt;h3 id="2-클라이언트-서버에-네트워크-규칙-추가의-문제점">2. 클라이언트, 서버에 네트워크 규칙 추가의 문제점
&lt;/h3>&lt;blockquote>
&lt;p>네트워크 규칙 정보는 상태를 영구적으로 저장하지 않는다.&lt;/p>&lt;/blockquote>
&lt;p>다른 방법으로는 클라이언트와 서버에 라우팅을 설정하면 됩니다.&lt;/p>
&lt;ol>
&lt;li>클라이언트&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>192.168.50.27(서버 IP)를 통해 10.0.10.0/24에 해당되는 패킷을 전송하는 라우팅 룰 추가합니다.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>서버&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>물리 인터페이스에서 패킷을 송신하여 10.0.10.0/24 수신을 허락합니다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>자세한 사항은 &lt;a class="link" href="https://s0okju.github.io/p/server-setup-4/" target="_blank" rel="noopener"
>서버 구축기 - 4. Kolla-ansible 설치 시 마주한 네트워크 문제&lt;/a> 을 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;p>문제는 iptable, route 룰 모두 영구적으로 상태를 저장하지 않습니다. &lt;strong>컴퓨터, 서버를 한번 끄면 route, iptable 규칙이 사라집니다.&lt;/strong>
물론 컴퓨터 부팅 후 규칙을 저장하는 init script를 제작하여 영구적으로 만들 수 있으며, iptable의 경우 도구를 활용하여 영구적으로 상태를 저장할 수 있습니다.&lt;/p>
&lt;p>저는 노트북을 통해 서버에 자주 접속합니다. 제 노트북에서도 내부적으로 가상 머신을 활용하곤 합니다.
이런 상황에서 2번처럼 영구적으로 저장하게 된다면 어떻게 될까요? 서버에 설정한 라우팅 규칙을 잊어 동일한 네트워크 대역의 가상머신에 접근을 요청하게 된다면? 결국 &lt;strong>유연성이 떨어진다는 문제&lt;/strong>가 발생하게 됩니다.&lt;/p>
&lt;h2 id="nic-2개-삽입한-이유">NIC 2개 삽입한 이유
&lt;/h2>&lt;p>위의 문제를 종합하면 &lt;strong>또다른 서버를 공유하고 있는 환경에서 가상 네트워크 인터페이스에 직접 접근하기 위한 적절한 라우팅 설정이 어렵다는 것입니다.&lt;/strong>
결국 위의 문제를 해결하기 위해서는 OpenStack 관련 모든 네트워크 대역을 물리 네트워크 인터페이스로만 구성하면 됩니다. 그렇다면 추가적인 라우팅 규칙을 설정할 필요가 없습니다.&lt;/p>
&lt;h3 id="nic-스위치들은-모두-어디에-연결될까">NIC 스위치들은 모두 어디에 연결될까?
&lt;/h3>&lt;p>동일한 네트워크 대역을 가지기 위해 NIC는 &lt;strong>모두 동일한 스위치에 연결&lt;/strong>됩니다. 즉 192.168.50.1/24 대역이라면 서버는 192.168.50.27로 할당받고 Floating IP로도 192.168.50.122 이런 식으로 할당받는 것이죠. &lt;strong>Provider Network는 서버와 동일한 대역의 IP를 가지게 됩니다.&lt;/strong>&lt;/p>
&lt;h3 id="이유-1-resource-api-floating-ip-직접-접근할-수-있다">이유 1. Resource API, Floating IP 직접 접근할 수 있다.
&lt;/h3>&lt;p>대부분의 인프라 리소스는 Terraform을 활용해 배포합니다. Kubernetes의 경우 Kubespray를 활용해서 배포하기 때문에 별다른 선택지는 없었고, 그 이외에는 관리가 편리하여 Terraform을 활용하게 되었습니다.&lt;/p>
&lt;p>만약에 NIC가 2개라면 위에서 설명한 라우팅 설정을 할 필요가 없어집니다. 왜냐하면 Resource API는 서버의 IP(&lt;code>192.168.50.27&lt;/code>)이고, Provider Network는 동일한 대역인 &lt;code>192.168.50.x&lt;/code>으로 접근할 수 있으니까요.&lt;/p>
&lt;h3 id="이유-2-포트-충돌을-해소할-수-있다">이유 2. 포트 충돌을 해소할 수 있다.
&lt;/h3>&lt;p>&lt;strong>이건 NIC 2개를 선택한 이전에 오픈 스택을 선택한 이유이기도 합니다.&lt;/strong>&lt;/p>
&lt;p>HexaCTF 플랫폼 자체는 2개의 워커 노드를 가진 쿠버네티스 내에서 작동됩니다.
문제를 해결하는 사람(이용자)가 접근해야 하는 사이트는 크게 두 가지 이며 배포된 장소가 다릅니다.&lt;/p>
&lt;ol>
&lt;li>HexaCTF 웹사이트 - Worker Node 1&lt;/li>
&lt;li>Challenge 서버 - Worker Node 2&lt;/li>
&lt;/ol>
&lt;h4 id="오픈-스택이-아닌-경우--단일-ip로만-구성된-경우">오픈 스택이 아닌 경우 = 단일 IP로만 구성된 경우
&lt;/h4>&lt;p>HexaCTF 관련 서비스들은 모두 NodePort를 통해 외부와 통신합니다. 웹사이트는 고정 NodePort 포트 번호를 지정해도 Challenge 서버는 NodePort 범위(30000~32767)내에 랜덤으로 포트 번호가 정해지기 때문에 &lt;strong>포트 번호 충돌 가능성이 존재&lt;/strong>합니다. 예로 웹 사이트를 30000으로 열어도 Challenge 서버가 30000 포트 번호로 생성되면 충돌이 발생하게 되는 것이죠.&lt;/p>
&lt;blockquote>
&lt;p>Challenge는 사용자가 동적으로 생성되는 쿠버네티스 커스텀 리소스입니다. 사용자는 Challenge 요청하여 NodePort의 포트 번호를 얻으면 http 혹은 nc을 통해 시스템에 접속하게 됩니다.&lt;/p>&lt;/blockquote>
&lt;p>그럼 누군가는 이렇게 생각할 수 있을 것 같습니다.&lt;/p>
&lt;blockquote>
&lt;p>Q. Worker Node 1에 배포된 애플리케이션은 NodePort가 고정되어 있으니 다른 포트 번호로 포트 포워딩 시키면 되지 않을까요? 예로 쿠버네티스 워커 노드에서는 애플리케이션을 30010로 열지만 실제 서버에는 5010번으로 iptable 규칙을 수정하면 되잖아요?&lt;/p>
&lt;p>A. 그것도 좋은 방법이라고 생각합니다. 실제로 서버는 정전이 많이 발생되는 환경이기에 iptable 규칙이 영속적으로 유지될 수 있도록 설정해야 합니다. iptable 규칙이 포함된 별도의 스크립트를 작성하면 포트 충돌 문제는 해소할 수 있습니다.&lt;/p>&lt;/blockquote>
&lt;p>스크립트를 작성하여 부팅 시 적용시키는 방법이 있습니다. 그러나 이것저것 추가하고 삭제하면서 스크립트를 업데이트 하지 않아 포트 충돌 문제가 발생할 수 있습니다.&lt;br>
관리를 잘하면 별다른 문제가 발생하지 않습니다. 그러나 &lt;strong>유동적으로 추가되고 삭제되는 것들을 일리리 관리하는 것은 실수가 많이 발생한다고 생각하여 스크립트 작성은 좋은 선택지로 보고 있지 않습니다.&lt;/strong>&lt;/p>
&lt;h4 id="오픈-스택을-활용할-경우--개별-ip-소유">오픈 스택을 활용할 경우 = 개별 IP 소유
&lt;/h4>&lt;p>개별적으로 IP를 가지게 되면 포트 충돌 문제를 완전히 해소할 수 있습니다.
Worker Node 1, 2는 서로 다른 IP를 가지고 있기 때문에 포트 번호가 겹치더라도 서로 다른 서비스로 인식되니까요.&lt;/p>
&lt;h3 id="이유-3-역할-별-접근-제어가-가능하다">이유 3. 역할 별 접근 제어가 가능하다.
&lt;/h3>&lt;p>HexaCTF는 크게 3가지 사용자가 있습니다.&lt;/p>
&lt;ol>
&lt;li>시스템 운영자( or 문제 등록자)&lt;/li>
&lt;li>개발자&lt;/li>
&lt;li>사용자&lt;/li>
&lt;/ol>
&lt;h4 id="오픈-스택이-아닌-경우--단일-ip로만-구성된-경우-1">오픈 스택이 아닌 경우 = 단일 IP로만 구성된 경우
&lt;/h4>&lt;p>단일 IP인 경우를 생각해 봅시다.
모든 애플리케이션을 NodePort로 열었습니다. 그리고 나서 라우터에 포트 포워딩을 수행합니다.
문제는 저희가 사용하고 있는 라우터는 포트 범위 기반으로 포트포워딩은 못하고 DMZ로 열어야 합니다. 모든 포트를 열어야 하는 상황인거죠.&lt;/p>
&lt;p>DMZ란 내부 네트워크에 존재하지만 외부에 접근할 수 있는 특수한 영역을 의미합니다. 주로 외부에 많이 노출되는 FTP, Web Server에 DMZ를 구성하며 불필요한 서비스 노출을 최소화하기 위해 주로 활용됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image-4.png"
width="1920"
height="1080"
srcset="https://s0okju.github.io/p/hexactf-11/image-4_hu_79a63deaced69902.png 480w, https://s0okju.github.io/p/hexactf-11/image-4_hu_87e943dcf443f1ab.png 1024w"
loading="lazy"
alt="출처 - https://www.zenarmor.com/docs/network-security-tutorials/what-is-dmz"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>만약에 단일 IP로 할경우 포트 포워딩을 할때 단일 IP에 전체의 포트를 외부에 오픈하게 됩니다. 이러한 환경에서 악의적인 사용자가 오픈한 포트를 스캔한 후 관리자 서비스에 접근할 수 있습니다. 이는&lt;strong>역할을 명확하게 분리하지 않아 발생한 불필요한 노출 문제이며, 명백하게 보안 문제로 이어지게 됩니다.&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Q. 방화벽을 설치하면 되잖아요!&lt;br>
A. 이럴 경우에는 하드웨어 방화벽이 필요합니다.. 돈이 없어요.. 🥹&lt;/p>&lt;/blockquote>
&lt;h4 id="오픈-스택을-활용할-경우--개별-ip-소유-1">오픈 스택을 활용할 경우 = 개별 IP 소유
&lt;/h4>&lt;p>오픈스택을 활용하여 모든 리소스에 IP를 할당하면 위와 같은 문제를 해결할 수 있습니다. 우선 인터넷을 연결할 수 있는 서비스와 그렇지 않는 서비스를 IP를 통해 명확하게 나눌 수 있게 됩니다. 즉 서비스를 분류하는 기준이 포트 번호가 아닌 IP로 확장된 것이죠.&lt;/p>
&lt;h5 id="사용자">사용자
&lt;/h5>&lt;p>Worker Node1, 2에 각각 사설 IP를 할당하여 단일 포트만 오픈해야 하는 서비스는 포트 포워딩을 통해 인터넷과 연결해주고, 범위로 지정해야 할 경우에는 DMZ로 인터넷과 연결해주면 됩니다.&lt;/p>
&lt;p>이런 식으로 구성하면 사용자는 Worker Node 1 내에 배포된 애플리케이션과 Worker Node 2에 배포된 Challenge 서비스만 접근할 수 있게 되어 불필요한 노출을 최소화하게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-11/image-5.png"
width="602"
height="498"
srcset="https://s0okju.github.io/p/hexactf-11/image-5_hu_475fc17c32d26117.png 480w, https://s0okju.github.io/p/hexactf-11/image-5_hu_57905927e19bcdec.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;h5 id="운영자-혹은-개발자">운영자 혹은 개발자
&lt;/h5>&lt;p>하지만 운영자와 개발자도 쿠버네티스 내에 배포된 각종 도구 혹은 다른 서비스에 접근해야 합니다.&lt;br>
그렇다면 어떻게 접근할까요? 바로 &lt;strong>VPN&lt;/strong>을 활용하는 것입니다. 즉 별도의 인터넷 연결 없이 사설 IP에 접근할 수 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>가상사설망&lt;/strong>(假想私設網) 또는 &lt;strong>VPN&lt;/strong>(&lt;a class="link" href="https://ko.wikipedia.org/wiki/%EC%98%81%EC%96%B4" title="영어"
target="_blank" rel="noopener"
>영어&lt;/a>: virtual private network)은 공중 &lt;a class="link" href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC" target="_blank" rel="noopener"
>네트워크&lt;/a>를 통해 한 회사나 몇몇 단체가 내용을 바깥 사람에게 드러내지 않고 통신할 목적으로 쓰이는 사설 통신망이다.&lt;/p>
&lt;ul>
&lt;li>출처: &lt;a class="link" href="https://ko.wikipedia.org/wiki/%EA%B0%80%EC%83%81%EC%82%AC%EC%84%A4%EB%A7%9D" target="_blank" rel="noopener"
>위키백과&lt;/a>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>이런식으로 구성하면 개발자와 관리자는 안전하게 관련 서비스에 접근할 수 있으며, 그 이외의 사용자는 해당 서비스에 접근할 수 없게 됩니다.&lt;/p>
&lt;h2 id="정리">정리
&lt;/h2>&lt;p>NIC를 2개로 삽입한 이유, 오픈 스택을 활용한 이유 등 선택의 이유는 복합적입니다. 그래서 순차적으로 원인과 결과를 명확하게 말하기 어려운 것 같습니다.&lt;/p>
&lt;p>핵심은 아래와 같습니다.&lt;/p>
&lt;blockquote>
&lt;p>외부와 통신해야 하는 모든 시스템은 동일한 네트워크 대역에서 직접 접근할 수 있는 사설 IP를 가져야 하며, 필요에 따라 인터넷에 노출시킬 수 있다.&lt;/p>&lt;/blockquote>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>이번 글은 여러가지 의미로 작성하기 어려웠습니다. 사설 IP인데 운영체제에서 만든 네트워크 인터페이스를 통해 할당받은 IP는 똑같이 사설 IP라고 설명해야 하나? 여러가지 고민이 많았던 것 같습니다.&lt;/p>
&lt;p>다음 글에서는 쿠버네티스로 애플리케이션을 어떻게 구성하고 배포했는지 설명하겠습니다.&lt;/p>
&lt;h2 id="참고">참고
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://tech.osci.kr/ovs_network_flow/" target="_blank" rel="noopener"
>OpenStack 환경에서의 OVS 네트워크 흐름 심층 분석 - 오픈소스컨설팅 테크블로그&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://aws-hyoh.tistory.com/161" target="_blank" rel="noopener"
>VPN 쉽게 이해하기&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.zenarmor.com/docs/network-security-tutorials/what-is-dmz" target="_blank" rel="noopener"
>What is a DMZ (Demilitarized Zone) Network? - zenarmor.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>HexaCTF 10. 아키텍쳐 설계 및 Challenge Control API 제작</title><link>https://s0okju.github.io/p/hexactf-10/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-10/</guid><description>&lt;ul>
&lt;li>2025-03-13 일부 내용 수정&lt;/li>
&lt;/ul>
&lt;p>이전까지 Challenge Operator 관련된 글만 작성했습니다. Challenge의 라이프 사이클을 전반적으로 설명해야 하는 만큼 많은 분량을 할애했습니다. 이번 Challenge Control API 부분은 이번 글로 모두 정리하고자 합니다.&lt;/p>
&lt;h2 id="아키텍쳐-설계">아키텍쳐 설계
&lt;/h2>&lt;h3 id="아케텍쳐">아케텍쳐
&lt;/h3>&lt;p>전반적인 아키텍쳐는 아래와 같습니다.&lt;/p>
&lt;h4 id="ctf-web">CTF-WEB
&lt;/h4>&lt;p>그림에 클라이언트 부분이 없다고 생각할 수 있는데 CTF-WEB의 경우 Flask Server로 이뤄져 있으나 html을 리다이렉트 하는 구조이기 때문에 하나로 표현했습니다.&lt;/p>
&lt;h4 id="container-control-api">Container Control API
&lt;/h4>&lt;p>본래 CTF-WEB 하나로 병합하여 사용할 예정이었습니다. 그러나 &lt;strong>Control API가 처리해야 하는 다른 플랫폼(Queue, Kubernetes)가 많다는 점과 비교적 에러 사항이 많다는 점&lt;/strong>을 감안하여 다른 서비스 형태로 분리하기로 했습니다. 즉, &lt;strong>불필요한 오류 확산을 막기 위해 분리&lt;/strong>했다고 보시면 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-10/image.png"
width="591"
height="201"
srcset="https://s0okju.github.io/p/hexactf-10/image_hu_a22f182b0acfb63c.png 480w, https://s0okju.github.io/p/hexactf-10/image_hu_1c6c3563af715315.png 1024w"
loading="lazy"
alt="시스템 구성도"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="705px"
>&lt;/p>
&lt;h3 id="왜-control-api는-필요한가">왜 Control API는 필요한가?
&lt;/h3>&lt;p>우선 &lt;strong>사용자와 상호작용&lt;/strong>을 해야 하기 때문에 명령어를 받는 서비스가 필요합니다. 클라이언트는 &lt;code>kubectl apply &lt;/code> 에 해당되는 명령어를 쿠버네티스 서버에 전송해야 합니다. 클라이언트에서 쿠버네티스 명령어를 실행시킨다는 것은 쿠버네티스 마스터 노드에 대한 엔드 포인트가 그대로 노출된다는 것과 같습니다. 즉, 치명적인 보안 문제로 이뤄지지 않을까요?&lt;/p>
&lt;blockquote>
&lt;p>쿠버네티스는 &lt;code>.kube&lt;/code> 라는 config 파일을 통해 쿠버네티스 클러스터를 관리하게 됩니다. 여기에 쿠버네티스 클러스터의 엔드포인트를 확인할 수 있습니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="control-api-operator-사이에-큐를-둔-이유">Control API-Operator 사이에 큐를 둔 이유
&lt;/h3>&lt;blockquote>
&lt;p>이번 글에서는 지속해서 Control API 입장에서 작성할 것입니다.&lt;/p>&lt;/blockquote>
&lt;p>Control API 입장에서는 &lt;strong>어떠한 절차를 통해 Challenge의 상태 변화를 얻어서 데이터베이스에 저장&lt;/strong>해야 합니다. Control API가 할 수 있는 방법은 크게 두 가지입니다.&lt;/p>
&lt;ol>
&lt;li>Control API가 지속해서 쿠버네티스에게 Challenge 상태 여부를 물어본다.&lt;/li>
&lt;li>쿠버네티스가 상태가 변할때마다 Control API에게 물어본다.&lt;/li>
&lt;/ol>
&lt;p>결국 누가 먼저 물어볼 것인가를 선정해야 합니다. 선정 기준이 프로젝트마다 다르겠으나 저는 &lt;strong>구현 난이도&lt;/strong>를 고려했을때 2번인 &amp;ldquo;쿠버네티스가 상태가 변할때마다 Control API에게 물어본다.&amp;ldquo;를 선택했습니다.&lt;/p>
&lt;p>이전 편에서도 제가 쿠버네티스를 선택한 이유는 컨테이너를 비동기적으로 탐색하여 실시간으로 상태 정보를 가져오기 어려움을 겪었기 때문입니다. 이와 유사한 문제의 늪에 빠지게 됩니다. 클라이언트는 Challenge가 무슨 상태인지 모르기 때문에 지속적으로 쿠버네티스에게 물어볼 것이고, 동기적으로 처리하면 속도가 느려질 것이니 비동기적으로 처리해야 할 것입니다.&lt;/p>
&lt;p>Operator는 내부적으로 Challenge의 상태 정보를 관리합니다. 그러므로 Challenge의 상태가 변경될때마다 Control API에게 보내는 방법은 어떨까요? 이러한 방식은 하나의 문제점을 가지게 됩니다. 동기로 처리를 하면 응답값이 올때까지 기다려야 하기 때문에 Operator의 속도가 느려질 가능성이 있습니다. 또한 Opeator 내부에는 비동기로 처리되기 때문에 무슨 문제가 발생할지 예상이 가지 않습니다.&lt;br>
그러나 해결 방법은 있습니다. Operator와 Control API 사이에 큐를 둠으로써 데이터 누락 문제도 해결하고 속도도 향상시킬 수 있습니다. 예로 Operator가 None -&amp;gt; Running 상태로 변경시켰을때 Queue에 Running으로 변경했다는 메세지만 전송한 후 Operator의 나머지 로직을 처리하게 됩니다. 즉, 응답이 올때까지 기다릴 필요가 없겠죠?&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-10/image.png"
width="591"
height="201"
srcset="https://s0okju.github.io/p/hexactf-10/image_hu_a22f182b0acfb63c.png 480w, https://s0okju.github.io/p/hexactf-10/image_hu_1c6c3563af715315.png 1024w"
loading="lazy"
alt="시스템 구성도"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="705px"
>&lt;/p>
&lt;h4 id="challenge-controller의-스터디-케이스-nova-architecture">Challenge Controller의 스터디 케이스: Nova Architecture
&lt;/h4>&lt;p>Challenge Controller 시스템의 전반적인 컨셉은 OpenStack의 Nova의 아키텍쳐를 많이 활용했습니다.&lt;/p>
&lt;blockquote>
&lt;p>Nova는 AWS의 EC2라고 생각하시면 됩니다.&lt;/p>&lt;/blockquote>
&lt;p>저희 프로젝트는 쿠버네티스 리소스를 활용한다는 점에서 Nova와 확실히 다르겠으나 &lt;strong>API를 통해 컴퓨팅 리소스를 제어한다는 컨셉은 동일하니까요.&lt;/strong>&lt;/p>
&lt;p>제가 활용한 컨셉은 아래와 같습니다.&lt;/p>
&lt;ol>
&lt;li>제어부(api)와 리소스 처리부(nova-compute, nova-volume &amp;hellip;) 분리&lt;/li>
&lt;li>제어부와 리소스 처리부 사이 이벤트 기반 처리 - Queue 배치&lt;/li>
&lt;/ol>
&lt;p>저희 프로젝트에서는 Control API가 nova-api에 해당되는 것이고, Operator가 nova-compute라고 생각하시면 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-10/image-1.png"
width="582"
height="656"
srcset="https://s0okju.github.io/p/hexactf-10/image-1_hu_ab243a49b712ac62.png 480w, https://s0okju.github.io/p/hexactf-10/image-1_hu_6c9e5f7672b5874f.png 1024w"
loading="lazy"
alt="출처 - https://www.oreilly.com/library/view/deploying-openstack/9781449311223/ch04.html"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;제어부와 리소스 처리부 분리&amp;rdquo; 관련 간단한 이야기&lt;br>
무조건 Nova Architecture를 차용했다고 해서 Operator를 별도로 제작한 것은 아닙니다. 그저 분리하여 이벤트 처리 기반으로 시스템을 제어하는 것이 많이 활용되는 방식이라고만 인식했습니다. 즉, Operator를 별도로 제작하는 것이 기술적인 고난도 도전이 아닌 선택지 중 일부로 받아들인 것입니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="control-api-제작">Control API 제작
&lt;/h2>&lt;blockquote>
&lt;p>자세한 사항은 HexaCTF 6. Kubebuilder를 활용한 ChallengeDefinition&amp;amp;Challenge Type 구현를 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;p>커스텀 리소스인 ChallengeDefinition과 Challenge를 확인해볼까요?&lt;/p>
&lt;ul>
&lt;li>ChallengeDefinition : 문제 상세 정보를 나타내며 챌린지 정보, 구성 리소스를 컴포넌트 단위로 정의한다.&lt;/li>
&lt;li>Challenge : 사용자(문제 풀이자)가 생성하는 문제의 단위로 참조된 ChallengeDefinition을 기반으로 리소스를 생성하고 삭제한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-10/image-2.png"
width="862"
height="492"
srcset="https://s0okju.github.io/p/hexactf-10/image-2_hu_8aa7f99b6fd840b5.png 480w, https://s0okju.github.io/p/hexactf-10/image-2_hu_dc443c05dda744a.png 1024w"
loading="lazy"
alt="ChallengeDefinition-Challenge 구조"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>사용자가 생성하는 문제를 Challenge 단위로 정의함으로써 &lt;strong>사용자 요청에 대한 형식이 간소화되고, 사용자 명령을 제어한다는 역할에 충실할 수 있게 됩니다.&lt;/strong>&lt;br>
사용자는 요청 시 사용자 정보와 문제를 전송하게 됩니다. 이러한 고유한 정보를 조합하여 Challenge 이름을 생성(&lt;code>challenge-{challenge_id}-{username}&lt;/code>)했으며 쿠버네티스 python sdk를 통해 쉽게 추가하고 삭제할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user_challenge_repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserChallengesRepository&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge definition 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_definition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ChallengeRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_challenge_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">challenge_definition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">ChallengeNotFound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Challenge definition not found for ID: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge name 생성 및 검증&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;challenge-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_is_valid_k8s_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">UserChallengeCreationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Invalid challenge name: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge manifest 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_manifest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;apps.hexactf.io/v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">challenge_name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;labels&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;definition&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">challenge_definition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">custom_api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_namespaced_custom_object&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">namespace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plural&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;challenges&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">challenge_manifest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="포트-번호는-challenge-상태-정보에-있다">포트 번호는 Challenge 상태 정보에 있다.
&lt;/h3>&lt;p>Challenge API는 생성을 요청하면 커스텀 리소스인 Challenge의 포트 번호를 가져와야 합니다. 이 과정을 어떻게 해결했는지 설명하겠습니다.&lt;/p>
&lt;p>Operator 부분으로 돌아와 Challenge는 Deployment, Service로 구성되어 있으며 Service는 NodePort를 통해 외부로 노출합니다. 그렇다면 &lt;strong>Control API가 요구하는 포트 번호는 Service에서 노출한 NodePort일 것입니다.&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Challenge는 외부에 노출되는 엔드 포인트는 단 하나 뿐입니다.&lt;/p>&lt;/blockquote>
&lt;p>여기서 Control API는 쿠버네티스를 Service를 조회하도록 구현하는 것이 좋을까요? 아니면 Challenge에 정보가 포함되는 것이 좋을까요? 당연히 &lt;strong>Challenge 정보에 포트 정보가 포함되는 것이 Control API의 역할에 충실하게 구현할 수 있는 방법일 것입니다.&lt;/strong>&lt;/p>
&lt;p>Operator에서는 Service가 생성이 완료되면 Challenge 상태값에 저장할 수 있도록 구현했습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Service가 존재하는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">types&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">identifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetServicePrefix&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Namespace&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsNotFound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Creating new service&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">identifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetServicePrefix&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to create Service&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Successfully created service&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">identifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetServicePrefix&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ServiceTypeNodePort&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Endpoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">NodePort&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;NodePort created&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">NodePort&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Status&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to update Challenge status with NodePort information&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to get Service&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Control API에서는 Challenge 생성 요청을 하면 Challenge의 상태값에서 포트 번호를 가져오기만 하면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">custom_api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_namespaced_custom_object&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">namespace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plural&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;challenges&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">challenge_manifest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="언제-컨테이너-빌드가-끝날-것인가--언제-포트-번호가-설정될-것인가">&amp;ldquo;언제&amp;rdquo; 컨테이너 빌드가 끝날 것인가? = &amp;ldquo;언제&amp;rdquo; 포트 번호가 설정될 것인가?
&lt;/h3>&lt;p>Control API가 Service를 조회를 하든, Operator가 포트 번호를 상태값으로 저장을 하든 똑같은 문제점이 있습니다. 바로 &lt;strong>포트 번호가 생성되는 시점이 컨테이너 빌드 시간에 영향을 크게 받는다는 의미입니다.&lt;/strong> 포트번호 생성 시간이 컨테이너 빌드 시간과 같다고 봐도 무방합니다.&lt;/p>
&lt;p>프로젝트에 대해 간단하게 설명하자면 해킹 문제는 출제자, 문제 유형에 따라 다른 플랫폼을 활용합니다.&lt;br>
시스템 문제는 대부분 리눅스 기반 베이스 이미지를 활용합니다. 어떤 리눅스 이미지를 사용하더라도 빌드 시간이 비슷하다는 특징을 가지고 있습니다.&lt;br>
그러나 웹은 상황이 다릅니다. 출제자에 따라서 SpringBoot, Flask 등 다양한 빌드 시간을 가진 플랫폼을 사용하기도 합니다.&lt;br>
위의 내용을 하나로 정리하자면 &lt;strong>&amp;ldquo;문제에 따라서 빌드 시간이 다르다.&amp;ldquo;는 의미이며 이는 &amp;ldquo;문제마다 포트번호를 반환하는 시간이 다르다&amp;quot;라고 해석하셔도 됩니다.&lt;/strong>&lt;/p>
&lt;h4 id="해결-방안---5초-sleep">해결 방안 - 5초 sleep
&lt;/h4>&lt;p>Control API에서 Challenge 요청 이후에 5초 sleep하는 방식을 채택했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-10/image-3.png"
width="741"
height="342"
srcset="https://s0okju.github.io/p/hexactf-10/image-3_hu_3f80406606f1e488.png 480w, https://s0okju.github.io/p/hexactf-10/image-3_hu_8d2bb29ce87516c1.png 1024w"
loading="lazy"
alt="Challenge 요청에 따른 포트 번호 반환 순서 다이어그램"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>채택 이유는 &lt;strong>구현하기 쉬웠고, 5초라는 기간은 대부분의 문제의 포트번호를 반환하기 충분했기 때문입니다.&lt;/strong> 다만 부족할 수 있으므로 재시도 로직을 넣었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">custom_api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_namespaced_custom_object&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">namespace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plural&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;challenges&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">challenge_manifest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># status 값 가져오기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">challenge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">endpoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;endpoint&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># status가 아직 설정되지 않았을 수 있으므로, 필요한 경우 다시 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">custom_api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_namespaced_custom_object&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">namespace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plural&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;challenges&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">challenge&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;metadata&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">challenge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">endpoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;endpoint&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="위의-해결-방안은-최선이-아니다">위의 해결 방안은 최선이 아니다.
&lt;/h4>&lt;blockquote>
&lt;p>5초라는 기간은 &lt;strong>대부분&lt;/strong>의 문제의 포트번호를 반환하기 충분했기 때문입니다.&lt;/p>&lt;/blockquote>
&lt;p>위의 대부분이라는 의미는 5초 + 재시도를 하더라도 포트번호가 반환되지 않은 문제가 있을 수 있다는 의미입니다. 실제 저희 프로젝트에서 9개의 문제 중 단 한 해킹 문제가 빌드 시간이 sleep+재시도 기간보다 길어서 포트번호가 바로 반환되지 않는 문제가 발생하기도 했습니다.&lt;/p>
&lt;blockquote>
&lt;p>빌드 시간이 긴 컨테이너는 대부분 스프링 부트입니다. ^ㅇ^&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>결국 포트번호 제때 얻기 위해서는 실시간 처리가 필요하게 됩니다.&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>다만 이 문제는 CTF-WEB 팀과 상의해야 하는 부분이 많기 때문에 보류하기로 했습니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>Control API는 단순히 클라이언트 명령어만 제어하기 위해 제작되었습니다. 그러나 실시간으로 사용자에게 포트번호를 전송하지 못한 점이 아쉽기도 했습니다. 이는 협의 후 수정될 예정이며, 문제가 해결되면 다른 글로 찾아 뵙겠습니다.&lt;/p>
&lt;h2 id="다음-글은">다음 글은&amp;hellip;
&lt;/h2>&lt;p>다음 글은 전체적인 인프라를 어떻게 구성했으며, 쿠버네티스에 어떻게 애플리케이션을 배치했는지 설명하겠습니다.&lt;/p></description></item><item><title>HexaCTF 9. Challenge Operator 커스텀 메트릭 설정 및 Prometheus Operator와 연결하기</title><link>https://s0okju.github.io/p/hexactf-9/</link><pubDate>Fri, 07 Mar 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-9/</guid><description>&lt;h2 id="prometheus">Prometheus
&lt;/h2>&lt;h3 id="왜-promethues-operator를-사용했을까">왜 promethues Operator를 사용했을까?
&lt;/h3>&lt;p>Prometheus는 다양한 대상(target)에서 시간 경과에 따른 지표를 수집하여 저장하는 시계열 데이터베이스입니다. 이러한 데이터를 우리 눈에 쉽게 보여주는 것이 Grafana입니다.&lt;/p>
&lt;blockquote>
&lt;p>프로메테우스 실행 절차는 &lt;a class="link" href="https://wlsdn3004.tistory.com/35" target="_blank" rel="noopener"
>wlsdn3004님의 Prometheus 란?&lt;/a>를 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;p>여기서 단순한 쿠버네티스가 아닌 쿠버네티스 오퍼레이터를 활용한 이유는 서비스 모니터를 통해 멀티 클러스터 혹은 다른 네임스페이스 환경에 대응할 수 있기 때문입니다.&lt;br>
여기서 서비스 모니터가 무엇인지 알아야겠죠? 서비스 모니터(ServiceMonitor)는 동적으로 다수 서비스를 모니터링할 수 있는 방법을 선언적으로 정의한 것입니다. 원하는 구성으로 ServiceMonitor를 적용시키면 Prometheus Operator는 자동으로 새로운 서비스를 찾게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image.png"
width="798"
height="355"
srcset="https://s0okju.github.io/p/hexactf-9/image_hu_fdd2ca4f2b5427d9.png 480w, https://s0okju.github.io/p/hexactf-9/image_hu_326563f517b9604c.png 1024w"
loading="lazy"
alt="출처 - Prometheus Operator Architecture. Source:  www.nicktriller.com"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;p>제가 Prometheus Operator를 쓰는 이유는 &lt;strong>다른 Namespace에 있는 Challenge Operator의 메트릭 정보를 얻기 위해서입니다.&lt;/strong> 구체적으로 어떻게 설정할지는 아래에서 설명하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-1.png"
width="972"
height="677"
srcset="https://s0okju.github.io/p/hexactf-9/image-1_hu_35953a980b95830c.png 480w, https://s0okju.github.io/p/hexactf-9/image-1_hu_973d19064e74c360.png 1024w"
loading="lazy"
alt="네임스페이스에 따른 프로젝트 구성도"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;h2 id="challenge-상태를-나타내는-커스텀-메트릭-제작하기">Challenge 상태를 나타내는 커스텀 메트릭 제작하기
&lt;/h2>&lt;h3 id="challenge-상태-정보-메트릭의-특징">Challenge 상태 정보 메트릭의 특징
&lt;/h3>&lt;h5 id="빠른-문제-해결">빠른 문제 해결
&lt;/h5>&lt;p>현재 저희 대회에서 필요한 것은 Challenge 성능 정보보다 &lt;strong>상태 정보&lt;/strong>입니다. 왜냐하면 문제 발생 시 빠르게 대처해야 하기 때문입니다.&lt;/p>
&lt;p>여기서 Challenge 내에 있는 Deployment에 대해 이해해야 합니다. 해킹 문제의 경우 취약한 하나의 기능을 구현하여 배포하게 됩니다. 즉, 모든 프로그램 자체가 단순합니다. 또한 한 사람당 하나의 Challenge만 사용하기 때문에 트래픽 문제가 발생할 확률은 높습니다.&lt;/p>
&lt;blockquote>
&lt;p>트래픽 항상 낮게 측정되지 않습니다. 간혹 Brute Force 특징을 가진 해킹 도구를 활용하는 경우가 있습니다. 그러나 이러한 행동은 부정 행위로 간주됩니다.&lt;/p>&lt;/blockquote>
&lt;p>여기서 말하는 문제는 &lt;strong>서버 생성 실패, 서버 삭제 실패 등 오퍼레이터에 발생하는 문제&lt;/strong>를 말하는 것입니다. 빈번하는 아니지만 드물게 삭제가 실패되는 경우가 있어서 Challenge 상태 정보를 중심으로 시각화를 했습니다. 만약에 삭제가 실패되었는데 실행 중이라면 남아 있는 리소스를 삭제하는 것이 우선이겠죠?&lt;/p>
&lt;p>좀 더 자세하게 구현하기 위해서는 상태 메트릭뿐만 아니라 로깅과 다른 메트릭을 조합해서 구현해야 할 것 입니다. 그러나 시간 관계 상 구현하지 못했으며 추후 구현할 예정입니다.&lt;/p>
&lt;h4 id="challenge-사용-패턴-확인">Challenge 사용 패턴 확인
&lt;/h4>&lt;p>제가 상태 정보를 우선 제작한 이유이기도 합니다.&lt;/p>
&lt;p>대회 이전에는 2가지 궁금증을 가지고 있었습니다. 아래의 질문들은 서버 메모리 용량을 산정할때 필요합니다.&lt;/p>
&lt;ol>
&lt;li>사람들은 한번에 몇개의 서버를 만들고 방치할까? -&amp;gt; 한 사람당 최대 몇개의 서버&lt;/li>
&lt;li>문제 분야마다 푸는 패턴이 있을까? -&amp;gt; Challenge 리소스 양과 분야 별 비율&lt;/li>
&lt;/ol>
&lt;p>사용 패턴은 현재보다는 미래를 위한 메트릭 지표라고 보면 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>여담&lt;/strong>
글 작성 시점으로 대회를 성공적으로 마무리했습니다. 사용자 패턴에 대해서는 다른 글에서 뵙겠습니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="어떤-메트릭을-활용할까">어떤 메트릭을 활용할까
&lt;/h3>&lt;p>&lt;a class="link" href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noopener"
>Prometheus 공식 문서&lt;/a>에 의하면 메트릭은 4개가 있습니다.&lt;/p>
&lt;ul>
&lt;li>Guage: 임의로 올라가거나 내려갈 수 있는 단일 숫자값을 나타내느 메트릭&lt;/li>
&lt;li>Counter : 누적되는 메트릭 값. 감소가 없음&lt;/li>
&lt;li>Histogram :지연 시간, 처리시간과 같이 연속형 값을 다룰때 사용&lt;/li>
&lt;li>Summary : 연속적인 데이터 값의 분포를 측정&lt;/li>
&lt;/ul>
&lt;h4 id="선택-기준은">선택 기준은?
&lt;/h4>&lt;p>저는 최종적으로 &lt;strong>Gauge&lt;/strong>를 선택하게 되었습니다.&lt;/p>
&lt;ul>
&lt;li>n시간 마다 수집되어야 함&lt;/li>
&lt;li>Running, Deleted, Error 개수의 증감을 표현할 수 있어야 함&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewGaugeVec&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GaugeOpts&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;challenge_resource_status&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Help&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Tracks the status of the custom resource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;challeng_id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge_name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Registry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="label은-어떻게-설정할까">Label은 어떻게 설정할까?
&lt;/h3>&lt;p>Prometheus의 Label은 키-값 쌍으로 이뤄져 있으며, Proemtheus가 시계열 데이터를 식별하는데 메트릭 이름과 더불어서 사용합니다.&lt;/p>
&lt;p>제가 원하는 상태 정보는 크게 세 가지 입니다. 제가 위해서 말한 2가지 목적에 대입하면 아래와 같습니다.&lt;/p>
&lt;ul>
&lt;li>상태별 Challenge 개수
&lt;ul>
&lt;li>전체 Challenge 현황을 파악하기 위해&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>사용자, 문제 별&lt;/strong> Challenge 상태
&lt;ul>
&lt;li>사용자 패턴 파악&lt;/li>
&lt;li>Error 문제 발생 시 빠르게 문제를 대처하기 위해&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문제별 실행 중/에러 커스텀 리소스 수
&lt;ul>
&lt;li>사용자 패턴 파악&lt;/li>
&lt;li>오류 사항이 있는 Challenge를 찾기 위해&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>그렇다면 Label로 무조건 지정할 것은 &lt;strong>사용자 식별자, 문제 식별자&lt;/strong>입니다. 이 두가지를 포함하여 Challenge 이름과 Namespace도 추가했습니다.&lt;/p>
&lt;blockquote>
&lt;p>본래 종류에 따라 Namespace를 분리할 예정이었습니다. 그러나 시간 관계 상 못하게 되어 코드에 남게 되었습니다.&lt;/p>&lt;/blockquote>
&lt;p>그리고 상태 정보를 값으로 설정했습니다. Gauge의 특징 중에 하나는 값을 증감할 수 있다고 했죠? 이 기능을 활용할 예정입니다.&lt;/p>
&lt;ul>
&lt;li>Running: 1&lt;/li>
&lt;li>Deleted: 2&lt;/li>
&lt;li>Error: 3&lt;/li>
&lt;/ul>
&lt;p>실제 코드로 작성하면 아래와 같습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewGaugeVec&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GaugeOpts&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;challenge_resource_status&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Help&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Tracks the status of the custom resource&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;challeng_id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge_name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Registry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="추가-deleted-상태-정보는-언제까지-가지고-있어야-할까">추가: Deleted 상태 정보는 언제까지 가지고 있어야 할까?
&lt;/h3>&lt;p>메트릭 구현 부분에서 &amp;ldquo;Deleted 상태 정보는 언제까지 가지고 있어야 할까?&amp;ldquo;가 난제이지 않을까 싶습니다.&lt;br>
Promethues는 기본적으로 30초 간격으로 &lt;code>/metrics&lt;/code> 내용을 스크랩합니다.&lt;/p>
&lt;p>저에게는 두 가지 고민이 있었습니다.&lt;/p>
&lt;ol>
&lt;li>삭제 요청 시 메트릭을 Deleted(3)로 설정 -&amp;gt; &lt;code>/metrics&lt;/code>에 불필요한 데이터가 쌓임. 대회가 끝날때마다 주기적으로 삭제하는 작업이 필요&lt;/li>
&lt;li>삭제 요청 시 메트릭을 Deleted 상태로 변경 후 &lt;strong>즉시 삭제&lt;/strong> -&amp;gt; Prometheus가 Deleted 상태를 스크랩할 수 있도록 시간 조정이 필요&lt;/li>
&lt;/ol>
&lt;p>대회 시기에는 Running, Error를 중점적으로 볼 예정이기 때문에 &lt;strong>두 번째 방법&lt;/strong>을 선택하게 되었습니다.&lt;br>
다만 Prometheus가 Deleted 상태를 한번 스크랩하고 삭제되어야 하기 때문에 &lt;strong>고루틴을 활용하여 1분 후에 메트릭이 삭제될 수 있도록 구현&lt;/strong>했습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeReconciler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processing deletion&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Minute&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// scrape_interval이 30초라면 1분 정도 기다리면 안전&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeleteLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Successfully completed deletion process&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 이 시점에서 finalizers가 비어 있으므로, K8s가 오브젝트를 실제 삭제함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="challenge-operator-쿠버네티스에-배포하기">Challenge Operator 쿠버네티스에 배포하기
&lt;/h2>&lt;h3 id="metrics-endpoint-설정">metrics endpoint 설정
&lt;/h3>&lt;p>kubebuilder는 CNCF 프로젝트인만큼 &lt;a class="link" href="https://book.kubebuilder.io/reference/metrics" target="_blank" rel="noopener"
>프로메테우스 엔드포인트를 개방할 수 있는 ServiceMonitor를 자동으로 설정할 수 있습니다.&lt;/a> 단, &lt;strong>kubebuilder에 내장되어 있는 kustomize를 활용해야 간단한 설정으로 사용할 수 있게 됩니다.&lt;/strong> 그러나 저는 kustomize를 활용하지 않을 예정이므로 다른 방법을 찾아봐야 합니다.&lt;/p>
&lt;p>kustomize는 배포 도구일뿐 근본적으로 kubebuilder에는 메트릭을 export 해줄 수 있는 함수가 있다고 생각해도 될 것 같습니다.&lt;br>
&lt;code>main.go&lt;/code> 에 가보시면 metricServer의 속성을 프로그램 속성 값으로 받아서 설정하고 있습니다. 즉 프로그램 실행시킬때 적절한 속성값을 넣어주면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">metricsAddr&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">enableLeaderElection&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">probeAddr&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">secureMetrics&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">enableHTTP2&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tlsOpts&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">tls&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StringVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">metricsAddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;metrics-bind-address&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;The address the metrics endpoint binds to. &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Use :8443 for HTTPS or :8080 for HTTP, or leave as 0 to disable the metrics service.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StringVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">probeAddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;health-probe-bind-address&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:8081&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;The address the probe endpoint binds to.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BoolVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">enableLeaderElection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;leader-elect&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Enable leader election for controller manager. &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Enabling this will ensure there is only one active controller manager.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prometheus metrics http 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BoolVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">secureMetrics&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;metrics-secure&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;If set, the metrics endpoint is served securely via HTTPS. Use --metrics-secure=false to use HTTP instead.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BoolVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">enableHTTP2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;enable-http2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;If set, HTTP/2 will be enabled for the metrics and webhook servers&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">opts&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">zap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Development&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">opts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">BindFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CommandLine&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metricsServerOptions&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">metricsserver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BindAddress&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">metricsAddr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SecureServing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="helm-으로-배포하기">Helm 으로 배포하기
&lt;/h3>&lt;p>위의 글에서 Kustomize를 활용하지 않을 것이라고 말씀 드렸습니다. 이유는 단순하게 &lt;strong>Helm이 가장 익숙&lt;/strong>하기 때문입니다.&lt;br>
그래도 차이점은 확인해봐야겠죠? &lt;a class="link" href="https://www.gomgomshrimp.com/posts/k8s/helm-and-kustomize" target="_blank" rel="noopener"
>SEOWOO님의 블로그 - Helm과 Kustomize, 무엇을 쓸까?&lt;/a> 일부 참고해서 핵심적인 차이점을 설명하겠습니다.&lt;/p>
&lt;ul>
&lt;li>Helm
&lt;ul>
&lt;li>여러 템플릿의 모음으로 구성할 수 있으며 values.yaml을 매개변수화하여 값을 전달&lt;/li>
&lt;li>애플리케이션 전체 패키지 관리 및 배포에 더 중심&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kustomize
&lt;ul>
&lt;li>상속의 개념을 활용해서 필요한 부분만 작성할 수 있음&lt;/li>
&lt;li>환경별 배포 구성 관리에 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Challenge Operator를 배포할때 Deployment를 활용했습니다. Operator의 철학에서도 Operator는 단일 Deployment로 배포되어야 한다고 설명했습니다.&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Operators should install as a single deployment e.g. &lt;code>kubectl create -f https://coreos.com/operators/etcd/latest/deployment.yaml&lt;/code> and take no additional action once installed.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>출처: &lt;a class="link" href="https://www.redhat.com/en/blog/introducing-operators-putting-operational-knowledge-into-software" target="_blank" rel="noopener"
>Introducing Operators: Putting Operational Knowledge into Software&lt;/a>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>여기서 주목해야 할 부분은 &lt;code>--metrics-bind-address=:8080&lt;/code> 부분입니다.
앞서 말했듯이 kubebuilder는 내부적으로 메트릭 서버를 만들었습니다. 이를 외부에 접근할 수 있도록 &lt;code>:8080(http)&lt;/code> 를 설정해야 합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Release.Name }}-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#34;helm.sh/hook-weight&amp;#34;: &lt;/span>&lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hexactf/env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mgmt&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Release.Name }}-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Values.operator.image.repository }}:{{ .Values.operator.image.tag }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Values.operator.image.pullPolicy }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Add the args section here&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Use --metrics-bind-address and substitute the environment variable METRICS_ADDR&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--metrics-bind-address=:8080&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="servicemonitor-설정하기">ServiceMonitor 설정하기
&lt;/h3>&lt;p>Prometheus ServiceMonitor는 차례로 해당 엔드포인트를 검색하고 파드를 모니터링하도록 프로메테우스를 구성합니다. 어떤 엔드포인트의 어떤 포트를 통해 메트릭을 스크래핑하고 어떤 매개변수를 활용할지 구성하게 됩니다. 쉽게 말해 &lt;strong>검색 대상을 Prometheus Operator가 일괄적으로 처리할 수 있도록 ServiceMonitor라는 리소스에 정의한 것입니다.&lt;/strong>&lt;/p>
&lt;p>Operator에 메트릭 서버의 포트를 열었다면 Helm에서 Port를 열어주고, Port를 연결해준 ServiceMonitor가 필요하겠죠?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Release.Name }}-operator-metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hexactf&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app.kubernetes.io/name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app.kubernetes.io/instance&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app.kubernetes.io/component&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">operator-metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">monitoring.coreos.com/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceMonitor&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Release.Name }}-operator-monitor&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">monitoring &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Prometheus Operator가 설치된 ns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prometheus &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Prometheus Operator의 label select&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Challenge Operator service matchlabel&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app.kubernetes.io/name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">challenge-operator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app.kubernetes.io/component&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 스크랩할 ns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchNames&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">hexactf&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Challenge Operator가 배포되는 ns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">endpoints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">operator-metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">30s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scrapeTimeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>프로메테우스를 확인하면 아래와 같이 서비스를 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-2.png"
width="1007"
height="292"
srcset="https://s0okju.github.io/p/hexactf-9/image-2_hu_fc9af273d105a8c.png 480w, https://s0okju.github.io/p/hexactf-9/image-2_hu_141a1be2abc2d49b.png 1024w"
loading="lazy"
alt="프로메테우스 대시보드에서 확인한 Challenge Operator metrics endpoint"
class="gallery-image"
data-flex-grow="344"
data-flex-basis="827px"
>&lt;/p>
&lt;h2 id="시각화">시각화
&lt;/h2>&lt;p>저희가 시각화 할 목록은 크게 3가지입니다.&lt;/p>
&lt;ul>
&lt;li>상태별 Challenge 개수&lt;/li>
&lt;li>&lt;strong>사용자, 문제 별&lt;/strong> Challenge 상태&lt;/li>
&lt;li>문제별 실행 중/에러 커스텀 리소스 수&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-3.png"
width="1584"
height="711"
srcset="https://s0okju.github.io/p/hexactf-9/image-3_hu_424f59dbe6f2d08c.png 480w, https://s0okju.github.io/p/hexactf-9/image-3_hu_77e8732e558b4689.png 1024w"
loading="lazy"
alt="실제 대회에서 사용한 대시보드"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="534px"
>&lt;/p>
&lt;p>저는 그 중 상태별 Challenge 개수와 사용자, 문제 별 Challenge 상태를 보여드리겠습니다.&lt;/p>
&lt;blockquote>
&lt;p>자세한 사항은 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/" target="_blank" rel="noopener"
>Grafana 공식 문서&lt;/a>를 참고하시길 바랍니다.
참고로 저는 하나하나씩 다 해봤습니다. 🥹&lt;/p>&lt;/blockquote>
&lt;h3 id="상태별-challenge-개수">상태별 Challenge 개수
&lt;/h3>&lt;p>2시간 동안 가장 마지막 값이 1(Running)인 경우를 count 해주는 명령어를 사용했습니다.&lt;/p>
&lt;blockquote>
&lt;p>2시간은 임의의 숫자로 실제 대회에서는 6시간을 기준으로 집계했습니다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-4.png"
width="762"
height="380"
srcset="https://s0okju.github.io/p/hexactf-9/image-4_hu_cd8ed660c3f187e7.png 480w, https://s0okju.github.io/p/hexactf-9/image-4_hu_fe37b1a78922e555.png 1024w"
loading="lazy"
alt="상태별 Challenge 개수 PromQL"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>하나의 패널에 2개 이상 메트릭을 설정하게 되면 Value에 알파벳이 붙습니다. 그러므로 맨 아래 Override를 활용하여 임의로 정해진 값을 수정합니다.
더 나은 시각화를 위해 Color scheme을 통해 색도 설정했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-5.png"
width="354"
height="586"
srcset="https://s0okju.github.io/p/hexactf-9/image-5_hu_2586051c7b8f12f3.png 480w, https://s0okju.github.io/p/hexactf-9/image-5_hu_ca6eeda7c0e80c03.png 1024w"
loading="lazy"
alt="Override를 활용하여 field name과 색 설정"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="144px"
>&lt;/p>
&lt;p>그리고 설정한 색을 Background에 보일 수 있도록 Stat styles에 설정했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-6.png"
width="353"
height="530"
srcset="https://s0okju.github.io/p/hexactf-9/image-6_hu_e21a7d6750258aab.png 480w, https://s0okju.github.io/p/hexactf-9/image-6_hu_dc53968c972a7bc.png 1024w"
loading="lazy"
alt="Stat styles 설정"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>아래와 같이 시각화를 할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-7.png"
width="1129"
height="249"
srcset="https://s0okju.github.io/p/hexactf-9/image-7_hu_219bfae10535345.png 480w, https://s0okju.github.io/p/hexactf-9/image-7_hu_923395d241e9dc6f.png 1024w"
loading="lazy"
alt="상태별 Challenge 개수 최종"
class="gallery-image"
data-flex-grow="453"
data-flex-basis="1088px"
>&lt;/p>
&lt;h3 id="사용자-문제-별-challenge-상태">사용자, 문제 별 Challenge 상태
&lt;/h3>&lt;p>위와 동일하게 최근 상태 정보만 가져오면 되기 때문에 집계 시간 중 가장 최신의 데이터를 가져옵니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">last_over_time(challenge_resource_status[2h])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Gauge는 숫자로 값을 설정합니다. 그러므로 Value mappings를 활용하여 문자로 변환합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-8.png"
width="349"
height="200"
srcset="https://s0okju.github.io/p/hexactf-9/image-8_hu_764c9c7424de2d57.png 480w, https://s0okju.github.io/p/hexactf-9/image-8_hu_ef63f2cb567cfd98.png 1024w"
loading="lazy"
alt="value mapping"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;p>PromQL은 쉬운 대신 Transform을 설정해야 합니다.&lt;/p>
&lt;ol>
&lt;li>Oragnaize field by name : challenge_id, username, status 값을 제외하고 전부 제거합니다.&lt;/li>
&lt;li>Group by: Challenge_id, username을 그룹핑하여 중복을 없애고 Status는 가장 최신 값을 가져옵니다.&lt;/li>
&lt;li>Grouping to Matrix: Grouping한 값을 가지고 새로운 Matrix를 활용합니다.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-9.png"
width="927"
height="304"
srcset="https://s0okju.github.io/p/hexactf-9/image-9_hu_b4556438ba351c9e.png 480w, https://s0okju.github.io/p/hexactf-9/image-9_hu_6d345ca5c16779c1.png 1024w"
loading="lazy"
alt="사용자, 문제 별 Challenge 상태-Transform"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="731px"
>&lt;/p>
&lt;p>테이블 형태로 시각화 하면 아래와 같은 결과를 얻을 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-9/image-10.png"
width="1106"
height="115"
srcset="https://s0okju.github.io/p/hexactf-9/image-10_hu_663245b90d615f75.png 480w, https://s0okju.github.io/p/hexactf-9/image-10_hu_923ae2d9817a3952.png 1024w"
loading="lazy"
alt="사용자, 문제 별 Challenge 상태-최종"
class="gallery-image"
data-flex-grow="961"
data-flex-basis="2308px"
>&lt;/p>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>Challenge Operator와 관련된 글을 모두 작성했습니다.&lt;/p>
&lt;p>다음 글에서는 실질적으로 클라이언트가 요청을 보내는 Challenge Control API에 대해 설명하겠습니다.&lt;/p>
&lt;h2 id="references">References
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://wlsdn3004.tistory.com/35" target="_blank" rel="noopener"
>Prometheus 란?&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noopener"
>Metric types | Prometheus&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.gomgomshrimp.com/posts/k8s/helm-and-kustomize" target="_blank" rel="noopener"
>Helm과 Kustomize, 무엇을 쓸까?&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/" target="_blank" rel="noopener"
>Transform data | Grafana documentation&lt;/a>&lt;/li>
&lt;li>정현석, 진미란 . (2023). 모니터링의 새로운 미래 관측 가능성. 제이펍.&lt;/li>
&lt;/ul></description></item><item><title>HexaCTF 8. 커스텀 컨트롤러를 통한 Challenge 생성 및 삭제 구현</title><link>https://s0okju.github.io/p/hexactf-8/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-8/</guid><description>&lt;ul>
&lt;li>2025-03-07 - 내용 수정&lt;/li>
&lt;/ul>
&lt;p>이전 글에는 상태를 어떻게 정의했는지 설명했습니다. 지금부터 어떻게 Challenge를 생성, 삭제할 수 있는지 설명하겠습니다.&lt;/p>
&lt;h2 id="조건-생각하기">조건 생각하기
&lt;/h2>&lt;p>우선 생성과 삭제 로직을 설명하기 이전에 생성과 삭제 시 무조건 수행되어야 하는 조건을 정리해야 합니다.&lt;/p>
&lt;ul>
&lt;li>생성
&lt;ul>
&lt;li>Deployment, Service 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>삭제
&lt;ul>
&lt;li>조건에 따라 30분 후 삭제 -&amp;gt; 생성일 기준으로 종료일 지정&lt;/li>
&lt;li>Challenge 삭제 시 관련 Deployment, Service 삭제 -&amp;gt; 무언가를 통해 연결되어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>주로 &lt;strong>삭제 로직을 중심&lt;/strong>으로 컨트롤러를 구현했습니다. 삭제를 제대로 제어하지 않으면 고아 리소스가 생기는 문제가 발생하기 때문입니다.&lt;/p>
&lt;h2 id="builder를-통해-controller를-설정한다">Builder를 통해 Controller를 설정한다.
&lt;/h2>&lt;p>공식 문서에 의하면 Builder는 controller-runtime을 감싸며, 일반적인 controller를 구축하기 위한 패턴을 제공한다고 합니다.&lt;/p>
&lt;p>이전 글에서 제가 했던 이야기 생각 나시나요? &lt;strong>오퍼레이터를 만든다는 것은 대상 리소스를 제어하는 controller와 Controller를 관리하는 Mananger를 만든다&lt;/strong>는 것이고, &lt;strong>Kubebuilder는 controller를 빌드하는 프로그램&lt;/strong>이라고 말했습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Manager&lt;/strong>
controller를 제작하는데 필요하며 client, caches, schemes등 의 공유 디펜던시를 제공한다. 컨트롤러는 Manager.Start를 호출하여 시작되어야 한다.
&lt;a class="link" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/manager" target="_blank" rel="noopener"
>공식 문서 &lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>실제 코드 상에서는 kubebuilder가 Manager라는 객체 생성해줍니다.(&lt;code>cmd/main.go&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>Manager는 고가용성을 위해 Controller들의 leader election도 수행합니다.&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mgr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetConfigOrDie&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Options&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Scheme&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">scheme&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Metrics&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">metricsServerOptions&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">WebhookServer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">webhookServer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">HealthProbeBindAddress&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">probeAddr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LeaderElection&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">enableLeaderElection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LeaderElectionID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;958dbbf6.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// LeaderElectionReleaseOnCancel defines if the leader should step down voluntarily&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// when the Manager ends. This requires the binary to immediately end when the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Manager is stopped, otherwise, this setting is unsafe. Setting this significantly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// speeds up voluntary leader transitions as the new leader don&amp;#39;t have to wait&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// LeaseDuration time first.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// In the default scaffold provided, the program ends immediately after&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// the manager stops, so would be fine to enable this option. However,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if you are doing or is intended to do any operation such as perform cleanups&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// after the manager stops then its usage might be unsafe.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// LeaderElectionReleaseOnCancel: true,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setupLog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;unable to start manager&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>요구사항에 따라서 하나의 프로젝트에 2개 이상의 controller를 생성할 수 있습니다. 현재 저희 대회에서는 Challenge Controller 하나만 필요하기 때문에 하나만 만든 것 뿐입니다.
Manager는 Controller를 제어하는 역할을 가진다고 설명했죠? &lt;strong>처음 Mananger가 여러개의 controller를 제어하기 위해서는 Manager에 Controller 등록 작업이 필요합니다.&lt;/strong> 그리고 이 부분은 라이브러리가 controller 파일 생성 시 자동으로 제공합니다.&lt;/p>
&lt;p>다시 돌아와서 Builder는 Challenge Controller를 생성하기 위해 어떤 정보가 필요할까요?&lt;/p>
&lt;ul>
&lt;li>Controller를 제어할 Manager&lt;/li>
&lt;li>Controller 대상 리소스&lt;/li>
&lt;li>Controller에 삽입할 Reconcile 함수&lt;/li>
&lt;/ul>
&lt;p>kubebuilder를 통해 자동으로 controller를 생성하면 아래와 같이 빌드 로직을 확인할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// SetupWithManager sets up the controller with the Manager.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeReconciler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SetupWithManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mgr&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Manager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Builder 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewControllerManagedBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mgr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Challenge라는 대상 리소스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">For&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">{}).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Owns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">appsv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Deployment&lt;/span>&lt;span class="p">{}).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Owns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Service&lt;/span>&lt;span class="p">{}).&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Named&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Controller에 ChallengeReconciler를 삽입&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Complete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="controller는-reconciler를-통해-reconcile를-실행한다">Controller는 Reconciler를 통해 Reconcile()를 실행한다.
&lt;/h2>&lt;p>Controller는 타겟 리소스(Challenge)를 모니터링하고 변경 시 &lt;code>Reconciler&lt;/code> 함수를 실행시킵니다. Reconciler 함수는 kube-apiserver를 통해 대상 리소스의 변경 사항을 확인합니다. 만약에 변경 사항이 감지가 되었다면 &lt;code>Reconcile&lt;/code> 함수를 실행시킵니다.&lt;/p>
&lt;p>맨 첫부분에 말한 조건은 모두 &lt;code>Reconcile&lt;/code> 함수 내에 구현하게 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>구체적인 내용은 &lt;a class="link" href="https://nakamasato.medium.com/kubernetes-operator-series-6-controller-runtime-component-controller-604c8905a1e1" target="_blank" rel="noopener"
>Kubernetes Operator series 6 — controller-runtime component — Controller | by Masato Naka | Medium&lt;/a> 읽는 것을 추천드립니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="challenge-리소스-생성">Challenge 리소스 생성
&lt;/h2>&lt;h3 id="쉽게-삭제할-수-있도록-challenge를-만들자">쉽게 삭제할 수 있도록 Challenge를 만들자!
&lt;/h3>&lt;p>Challenge는 Deployment, Service를 하나의 컴포넌트로 구성하여 생성하게 됩니다. &lt;strong>삭제 시 고아 리소스가 발생하지 않도록 생성하는 것이 중요합니다.&lt;/strong>
위의 과제를 달성하기 위해서 Challenge-Deployment, Service간 부모-자식 관계를 지정했습니다.&lt;/p>
&lt;blockquote>
&lt;p>Owns에 대해서 소유 관계라고 말하는 사람이 있고, 어느 책에서는 부모-자식 관계라고 설명하기도 했습니다. 저는 상하 관계를 뚜렷하게 표현할 수 있어 &lt;strong>부모-자식 관계&lt;/strong>로 설명하겠습니다.&lt;/p>&lt;/blockquote>
&lt;p>쉽게 말해 커스텀 리소스(Challenge) 부모이고 Deployment, Service 자식 관계라고 생각하시면 됩니다. Challenge가 Deployment과 연관된다는 것은 Deployment에 변경 사항 발생 시 Reconcile()이 발생한다는 것입니다.&lt;/p>
&lt;p>부모-자식 관계를 사용한 이유는 삭제 시 편리하기 때문입니다. 구체적으로 말하자면 &lt;strong>자식 리소스가 부모 리소스에 소속된 것으로 설정되어 있다면 부모 리소스 삭제 쿠버네티스의 가비지 컬렉션은 모든 자식 리소스를 자동으로 정리&lt;/strong>합니다.&lt;/p>
&lt;h4 id="구현">구현
&lt;/h4>&lt;p>생성 시 아래의 로직을 따릅니다.&lt;/p>
&lt;ol>
&lt;li>Challenge 객체 초기화&lt;/li>
&lt;li>LoadDefinition을 로드&lt;/li>
&lt;li>LoadDefinition 기반으로 Deployment, Service를 생성(부모-자식 관계)&lt;/li>
&lt;li>Challenge에 필요 레이블을 추가&lt;/li>
&lt;/ol>
&lt;p>여기서 초기화 부분에 &lt;code>challenge.Status.StartedAt&lt;/code> 를 현재 시간으로 저장했습니다. 이 속성값은 초기화 혹은 추후 30분 후에 삭제하기 위해 비교값으로 활용됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 처음 생성 시 StartedAt 등 Status 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StartedAt&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">now&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StartedAt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">now&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CurrentStatus&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCurrentStatus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Status&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to initialize status&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 최신 상태로 갱신&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// NotFound 에러 등은 무시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 현재 상태에 따라 분기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CurrentStatus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsNone&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 실제 Challenge에 필요한 리소스들(Deployment, Service 등) 생성 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">loadChallengeDefinition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 한 번 더 재큐(Requeue)하여 바로 다음 단계 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Requeue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Deployment, Service 생성 시 Challenge에 대한 &lt;code>SetControllerReference&lt;/code> 를 설정합니다. 그리고 &lt;code>Client.Create&lt;/code>를 통해 Deployment,Service를 생성합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Deployment가 존재하는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectKey&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Namespace&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsNotFound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Creating Deployment&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Deployment.Namespace&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Deployment.Name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Owner Reference 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetControllerReference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Scheme&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;failed to set controller reference&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Deployment 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">deploy&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;failed to create Deployment&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;failed to get Deployment&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그리고 컨트롤러 Builder 초기화 부분에서 소유 관계를 명확히 구현하시면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// SetupWithManager sets up the controller with the Manager.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeReconciler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SetupWithManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mgr&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Manager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Builder를 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewControllerManagedBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mgr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Challenge(부모 리소스)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">For&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">{}).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Deployment(자식 리소스)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Owns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">appsv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Deployment&lt;/span>&lt;span class="p">{}).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Service(자식 리소스)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Owns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Service&lt;/span>&lt;span class="p">{}).&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Named&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Controller에 ChallengeReconciler를 삽입&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Complete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="상태를-감지하고-변경하는-방법">상태를 감지하고 변경하는 방법
&lt;/h3>&lt;p>완전 새로운 Challenge라면 상태 값과 같은 기타 정보를 초기화하여 필요 리소스를 생성합니다. 이 과정에서 None -&amp;gt; Running 상태로 변경하게 되는데, 코드 상에서 참조하고 있는 challenge의 status 값을 Running를 변경하여 새로운 상태를 쿠버네티스에 업데이트합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CurrentStatus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetRunning&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">now&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StartedAt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">now&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Status&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="컨트롤러-구현에-중요한-것은---멱등성">컨트롤러 구현에 중요한 것은? - 멱등성
&lt;/h3>&lt;p>컨트롤러에서 말하는 &lt;strong>멱등성&lt;/strong>은 변경 되지 않는 리소스의 조정 요청이 여러번 있더라도 &lt;strong>매번 동일한 결과&lt;/strong>를 가져와야 한다는 의미입니다. 만약에 하나의 부모 리소스에 Deployment 1개로 구성된 자식 리소스를 가져야 한다고 가정해봅시다. 무슨 일이 발생하더라도 하나의 부모 리소스에 무조건 하나의 Deployment를 가져야 합니다. 중간에 추가적인 요청이 발생하여 Deployment가 2개 생성된다면 이것은 멱등성이 깨진 것입니다.&lt;/p>
&lt;p>멱등성은 Challenge Controller를 구현하면서 현재까지도 가장 어려워하는 부분이기도 합니다.
Challenge는 쿠버네티스의 기본 리소스를 가지고 있지만 절차에 따라 레이블, 상태 값이 업데이트 됩니다. 변경 사항이 많은 탓에 &lt;strong>Reconcile 로직을 구현할 때는 최신의 Challenge를 불러오도록 구현&lt;/strong>해야 합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그렇지 않으면 Kubernetes Client가 이용하는 Kubernetes Cache에 있는 상태 값과 실제 데이터에 불일치가 발생해 문제가 발생하게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;controller&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;controllerGroup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;controllerKind&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Challenge&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;challenge-59-sample&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;challenge-59-sample&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;reconcileID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bf0eee44-a54d-417d-8322-7dc81e52152e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Operation cannot be fulfilled on challenges.apps.hexactf.io \&amp;#34;challenge-59-sample\&amp;#34;: the object has been modified; please apply your changes to the latest version and try again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="challenge-리소스-삭제">Challenge 리소스 삭제
&lt;/h2>&lt;h3 id="삭제-상태를-알리기-위한-finalizer-이용">삭제 상태를 알리기 위한 Finalizer 이용
&lt;/h3>&lt;p>상황에 따라 특별한 정리 로직이 필요한 경우가 있습니다. 이럴 경우 Finzliazer를 통해 리소스를 삭제하지 못하게 할 수 있습니다. 대표적인 예시로 pvc-protection가 있으며 이상 파드가 적극적으로 사용되지 않을때까지 pvc의 삭제가 연기됩니다.&lt;/p>
&lt;blockquote>
&lt;p>실제로 Finalizer를 사용하지 않으면 삭제는 빠르게 발생됩니다.&lt;/p>&lt;/blockquote>
&lt;p>프로젝트에서는 리소스 간 종속적인 관계를 가지지 않고 모두 독립적으로 사용됩니다. 그러므로 pvc 사례처럼 Finalizer가 필요 없다고 생각할 수 있습니다.
그러나 저희 프로젝트는 삭제 상태 정보를 설정하여 외부에 보내야 합니다. 뒤에서 말씀하겠지만 상태 정보를 큐를 통해 전송하게 되는데, 이때 삭제 요청 -&amp;gt; 상태 메세지 전송 -&amp;gt; 삭제 로직이 구현이 되어야 합니다. 결국 리소스 정리가 아니더라도 &lt;strong>삭제가 되었다는 상태 정보를 다른 애플리케이션에게 알려줘야 하는 시간이 필요하게 됩니다.&lt;/strong>
저는 이러한 로직을 구현하기 위해 Finalizer를 사용하게 되었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challengeFinalizer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;challenge.hexactf.io/finalizer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeReconciler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">addFinalizer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Finalizers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Finalizers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challengeFinalizer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to add finalizer: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="리소스가-삭제되는-2가지-방법">리소스가 삭제되는 2가지 방법
&lt;/h3>&lt;p>리소스가 삭제되는 방법은 크게 두 가지입니다.&lt;/p>
&lt;ol>
&lt;li>사용자가 삭제를 요청한다.&lt;/li>
&lt;li>이용 시간이 30분 이상이면 삭제를 요청한다.&lt;/li>
&lt;/ol>
&lt;p>삭제 요청은 &amp;ldquo;삭제 요청하겠습니다!&amp;rdquo; 라는 &lt;code>deletionTimestamp &lt;/code>속성만 기록되는 것 뿐입니다. 실제로는 &lt;code>deletionTimestamp&lt;/code>가 설정된 것을 확인하고 Finalizer가 제거된 후에 대상 리소스가 삭제된 것입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeReconciler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processing deletion&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Finalizer가 남아있는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">controllerutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ContainsFinalizer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge.hexactf.io/finalizer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 파이널라이저 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">controllerutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RemoveFinalizer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge.hexactf.io/finalizer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메타데이터 업데이트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to remove finalizer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 재시도 위해 Requeue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">RequeueAfter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 필요하다면 Deleted 이벤트 전송&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KafkaClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendStatusChange&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Deleted&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to send status change message&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 여기서도 에러 시 재시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Minute&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// scrape_interval이 30초라면 1분 정도 기다리면 안전&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">crStatusMetric&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DeleteLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Namespace&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Successfully completed deletion process&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 이 시점에서 finalizers가 비어 있으므로, K8s가 오브젝트를 실제 삭제함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>사용자가 삭제를 요청한다.
사용자가 삭제를 요청하는 것은 사용자가 삭제 이벤트를 직접 하는 것과 같습니다. 요청 이후에는 자동으로 deletionTimestamp가 기록될 것 입니다.&lt;/li>
&lt;/ol>
&lt;p>아래 Reconcile() 로직에 의해서 삭제를 수행할 것입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DeletionTimestamp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsZero&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>이용 시간이 30분 이상이면 삭제를 요청한다.&lt;br>
Challenge 생성 부분에 실행 30분 후 삭제를 구현하기 위해 &lt;code>startedAt&lt;/code> 를 설정한다고 말했죠? startedAt 기준으로 30분 후에 삭제되도록 구현했습니다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Since&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StartedAt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">challengeDuration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 아직 DeletionTimestamp가 없다면 Delete 요청&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DeletionTimestamp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsZero&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Time exceeded; issuing a Delete request&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to delete challenge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Delete 요청 후에는 Kubernetes가 DeletionTimestamp를 설정하고&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다시 Reconcile이 호출되면 handleDeletion()이 수행됨&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 이미 Delete 진행중이면 handleDeletion으로&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>만약 제한 시간 이내에 있다면 requeue를 합니다.&lt;br>
kube-apiserver를 통해 대상 리소스의 변경 사항 감지하면 이벤트를 work queue에 넣습니다. Controller가 시작되면 Watch 로직을 통해 큐에 있는 데이터를 구독하게 되고 Reconcile() 로직을 수행하게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CurrentStatus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsRunning&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NamespacedName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// isOne이 false이면 일정 시간 내에만 작동&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IsOne&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Since&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StartedAt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">challengeDuration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DeletionTimestamp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsZero&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleDeletion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Running 메세지 전송&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KafkaClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendStatusChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;Running&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Failed to send status change message&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">RequeueAfter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">requeueInterval&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>프로젝트에 대입해보자면 제한 시간 내에 있으면 몇 분 간격으로 30분이 지났는지 확인한다는 것입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-8/image-1.png"
width="720"
height="340"
srcset="https://s0okju.github.io/p/hexactf-8/image-1_hu_70aac238b179c19.png 480w, https://s0okju.github.io/p/hexactf-8/image-1_hu_25498fcfb3aa3dca.png 1024w"
loading="lazy"
alt="출처 - https://nakamasato.medium.com/kubernetes-operator-series-6-controller-runtime-component-controller-604c8905a1e1"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/p>
&lt;p>&lt;strong>requeue Interval에 대한 생각&lt;/strong>&lt;/p>
&lt;p>기본적으로 쿠버네티스는 30초 간격으로 모든 리소스의 상태를 확인합니다. Operator 또한 work queue에 requeue하여 리소스 간격 시간을 설정할 수 있게 됩니다. 여기서 몇 초 간격으로 보는 것이 좋을까요?&lt;/p>
&lt;p>자주 리소스를 관찰하게 되면 큐에 많은 데이터가 쌓이게 되면서 최종적으로 시간 지연이 발생할 수 있습니다. 반면 큰 시간 간격으로 관찰하게 되면 &amp;ldquo;지속적으로 확인하여 상태 정보를 실시간으로 확인한다&amp;quot;라는 장점을 잃을 수 있습니다.
저는 최종적으로 30초 간격으로 Challenge의 상태를 확인했습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>여담&lt;/strong> .&lt;br>
글로 정리하다보니 30초 간격으로 requeue할 필요가 없다고 생각했습니다. 초기에는 무슨일이 일어날지 모르니 30초 간격으로 확인하는게 좋겠다고 생각을 했습니다. 그러나 Challenge 하위 리소스에 변경사항이 감지되어 Reconcile를 수행한다면 30초 간격의 Requeue는 필요 없겠죠?&lt;/p>&lt;/blockquote>
&lt;h2 id="정리">정리
&lt;/h2>&lt;p>위의 내용을 흐름도로 정리하면 아래와 같습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-8/image.png"
width="919"
height="652"
srcset="https://s0okju.github.io/p/hexactf-8/image_hu_a34d715bd16cc892.png 480w, https://s0okju.github.io/p/hexactf-8/image_hu_d1ab6704279ab332.png 1024w"
loading="lazy"
alt="Challenge Operator 흐름도"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>글로 정리하다보니 스스로 잘못 생각한 부분을 찾게 되었습니다. 대표적인 예로 Requeue(재시도) 할 필요 없는데 구현한 것처럼 말이죠. 이건 다음에 수정해야 할 것 같습니다.&lt;/p>
&lt;p>이번 글을 끝으로 로직 부분 설명은 끝난 것 같습니다. 다음 글에서는 어떻게 커스텀 메트릭을 통해 Challenge를 시각화할 수 있는지 설명하겠습니다.&lt;/p>
&lt;h2 id="참고">참고
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://kmaster.tistory.com/106" target="_blank" rel="noopener"
>Finalizers, ownerReferences&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://togomi.tistory.com/28" target="_blank" rel="noopener"
>Kubernetes operator 메커니즘&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nakamasato.medium.com/kubernetes-operator-series-5-controller-runtime-component-reconciler-501f71b7397a" target="_blank" rel="noopener"
>Kubernetes Operator series 5— controller-runtime component — Reconciler | by Masato Naka | Medium&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nakamasato.medium.com/kubernetes-operator-series-6-controller-runtime-component-controller-604c8905a1e1" target="_blank" rel="noopener"
>Kubernetes Operator series 6 — controller-runtime component — Controller | by Masato Naka | Medium&lt;/a>&lt;/li>
&lt;li>제시슨 제시슨, 조슈아 우드. (2021). 쿠버네티스 오퍼레이터. 에이콘.&lt;/li>
&lt;/ul></description></item><item><title>HexaCTF2025 대회 운영 후기</title><link>https://s0okju.github.io/p/hexactf2025-review/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf2025-review/</guid><description>&lt;p>2025.03.02 - 내용 수정&lt;/p>
&lt;p>4개월 동안 여러 오류의 신세계의 맛본 결과 드디어 대회를 개최하게 되었습니다. 여타 CTF 대회와 다르게 3일이라는 긴 시간 동안 이뤄졌습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image.png"
width="757"
height="668"
srcset="https://s0okju.github.io/p/hexactf2025-review/image_hu_4b1f04fd2608e8ba.png 480w, https://s0okju.github.io/p/hexactf2025-review/image_hu_771ae6c356221a37.png 1024w"
loading="lazy"
alt="두근"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;h2 id="사전-점검">사전 점검
&lt;/h2>&lt;p>대회 하루 전에 전반적인 검토를 수행하게 되었습니다. &lt;del>시간이 여유로울 때는 오류가 보이지 않았는데 왜 하루 이틀 전에 잘 보일까..&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-1.png"
width="607"
height="340"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-1_hu_ae1e1b3de1446789.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-1_hu_c73bca90a4a07b0f.png 1024w"
loading="lazy"
alt="문제 생겼다고 연락올때마다 짓는 표정"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;h3 id="서버가-좀-버벅거려요">서버가 좀 버벅거려요.
&lt;/h3>&lt;p>중간에 웹 페이지에 멈춤 현상이 있다고 해서 웹을 담당하는 파드를 확인했습니다.&lt;br>
다중 접속한 것도 아니고 어떠한 행위를 하지 않았는데 request 한 메모리 양에 근접하게 사용하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-2.png"
width="565"
height="218"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-2_hu_7cd3bbf130e352d7.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-2_hu_cfb9d065fc0d9aa4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/p>
&lt;p>웹 부분이 이런건 처음이 아니였습니다. 초기에는 Flask는 메모리를 적게 사용되지 않을까 하고 request, limits를 적게 잡았다가 pod가 강제 종료되기도 했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-3.png"
width="793"
height="274"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-3_hu_4d0a315c87b1bcbb.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-3_hu_7fca4370b0c0510a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="694px"
>&lt;/p>
&lt;p>메모리 사용 패턴이 짐작이 가지 않았다. 어쩔때는 팍 튀는 형태로 나타나기도 하고, 어쩔때는 메모리 양이 수직 상승하다가 지속적으로 유지되기도 했습니다.&lt;/p>
&lt;p>그래서 request, limits를 지정하지 않았습니다.(&lt;del>실제로 이렇게 하면 안됩니다.&lt;/del>)
근본적으로 저 문제를 해결하려면 애플리케이션을 우선 최적화해야 한다고 생각했습니다. 문제를 즉시 파악하고 해결하는데 시간이 부족하니 메모리 사용 패턴을 확인할 겸 과감하게 리소스 제한을 풀게 되었습니다.&lt;/p>
&lt;blockquote>
&lt;p>여담
서버 메모리가 생각보다 널널해서 리소스 제한을 풀었습니다. 그러나 다음 대회에서는 꼭 부하 테스트를 해서 적절하게 리소스를 제한을 설정할 것입니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="challenge가-안열려요">Challenge가 안열려요..
&lt;/h3>&lt;h4 id="금쪽이-challenge-controller">금쪽이 Challenge Controller
&lt;/h4>&lt;p>Challenge Controller 부분의 고질적인 문제는 바로 가끔 오류를 반환한다는 점이었습니다. 근본적인 원인은 사전에 파악은 하고 있었지만 관련 팀원과 함께 대공사가 필요하기에 바로 문제를 해결하지 않았습니다.&lt;/p>
&lt;h2 id="대회-당일">대회 당일
&lt;/h2>&lt;p>저는 전반적인 인프라 관리와 Challenge 관리를 담당하게 되었습니다. 앞서 말했다싶이 Challenge Controller가 오류를 자주 반환한다고 말씀 드렸죠?&lt;br>
그래서 대회 하루 이틀 동안은 아래와 같은 표정으로 모니터를 바라봤습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-5.png"
width="540"
height="304"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-5_hu_16b67f85867362b.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-5_hu_3cf5457ab6afaf30.png 1024w"
loading="lazy"
alt="제발 터지지 말아줘"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>예상보다 Challenge Operator 쪽에는 별다른 문제는 없었습니다.&lt;br>
가끔 Challenge가 생성이 안된다고 연락이 오다가 &amp;ldquo;다시 해보니 됩니다.&amp;ldquo;라는 메세지를 많이 받았습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-6.png"
width="1584"
height="711"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-6_hu_424f59dbe6f2d08c.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-6_hu_77e8732e558b4689.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="534px"
>&lt;/p>
&lt;p>마지막 날에는 사용자도 요령을 익혔는지 Challenge 시스템과 관련된 문의는 없었습니다. &lt;del>나름 평화로웠습니다.&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-7.png"
width="600"
height="527"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-7_hu_9ab8ef8a654bddf7.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-7_hu_8e107457ab6d77.png 1024w"
loading="lazy"
alt="마지막 날은 평화로웠다.."
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;h2 id="대회-후기---다음-과제">대회 후기 - 다음 과제
&lt;/h2>&lt;p>일단 기간이 긴 대회인만큼 트래픽이 많이 몰린다는 이벤트는 없었습니다. 그래서 큰 문제 없이 대회를 마무리할 수 있었던 것 같습니다.&lt;/p>
&lt;p>첫 대회에 큰 의미가 있지만 기술적으로 부족한 부분을 확실히 파악하게 된 것 같습니다.&lt;/p>
&lt;h3 id="challenge-controller-고치기">Challenge Controller 고치기
&lt;/h3>&lt;p>Chllanege Controller 관련해서 두 가지 문제점이 있습니다.&lt;/p>
&lt;ol>
&lt;li>데이터베이스 스키마의 설계적인 문제점&lt;/li>
&lt;li>프론트엔드가 실시간으로 Challenge 정보를 가져오지 못해서 발생하는 문제점&lt;/li>
&lt;/ol>
&lt;p>2번 문제는 프론트엔드가 Controller에게 요청을 보내고 5초 동안 대기를 수행한 후에 Challenge 정보를 얻습니다. 문제에 따라서는 빌드 시간이 5초가 넘을때가 있습니다. 이럴 경우에 클라이언트 측에서는 오류가 뜨지만 실제로 Challenge는 생성되게 됩니다.&lt;/p>
&lt;p>이번 대회 이후에는 위의 두 문제를 우선 고쳐야 할 것 같습니다.&lt;/p>
&lt;h3 id="메모리가-계속-증가한다---flask-최적화">메모리가 계속 증가한다. - Flask 최적화
&lt;/h3>&lt;p>사전 점검때도 말했지만 메모리가 지속적으로 증가하며 이를 해결하기 위해서는 코드를 수정해야 한다고 말씀 드렸습니다.&lt;/p>
&lt;p>개인적으로 가장 심각하게 봤던 부분이 바로 메모리 사용량입니다.&lt;/p>
&lt;p>CTF 대회 특성상 아래의 문제 패턴이 있습니다.&lt;/p>
&lt;ol>
&lt;li>문제 파일을 다운로드한 후 다른 도구로 문제를 해결하여 웹사이트에 정답를 입력한다.&lt;/li>
&lt;li>Challenge를 생성하여 문제를 해결한 후 웹사이트에 정답을 입력한다.&lt;/li>
&lt;/ol>
&lt;p>웹사이트는 &amp;ldquo;정답 입력&amp;quot;을 위주로 활용됩니다.&lt;br>
그렇다면 사용자가 문제를 해결할때 문제를 푸는 시간이 길까요? 입력하는 시간이 길까요? &lt;strong>당연 다른 도구로 문제 푸는 시간이 깁니다.&lt;/strong> 대회를 운영하면서 애플리케이션은 나름 상승폭이 적고 안정적인 메모리 사용량을 가질 것이라고 예상했습니다.&lt;/p>
&lt;p>아래는 웹사이트 메모리 사용량입니다. 점진적으로 증가하죠? 개인적으로 불필요한 메모리를 활용하고 있다고 생각했습니다. (웹사이트 부분은 프론트와 백엔드가 하나로 합쳐져 있습니다.)&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-8.png"
width="1528"
height="255"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-8_hu_ccc716e859cc8814.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-8_hu_6337753dbe28d392.png 1024w"
loading="lazy"
alt="지속적으로 상승하는 웹사이트 메모리 사용량"
class="gallery-image"
data-flex-grow="599"
data-flex-basis="1438px"
>&lt;/p>
&lt;p>Challenge Controller 부분도 똑같이 메모리가 쌓이는 문제를 가지고 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-9.png"
width="1379"
height="250"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-9_hu_43e2b824dbdf9a06.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-9_hu_532cc4c6a4c9182d.png 1024w"
loading="lazy"
alt="지속적으로 상승하는 Challenge Controller 메모리 사용량"
class="gallery-image"
data-flex-grow="551"
data-flex-basis="1323px"
>&lt;/p>
&lt;p>Flask를 깊게 공부해서 메모리 상승 원인과 해결책을 찾아야겠습니다.&lt;/p>
&lt;h3 id="challenge-리소스-용량-산정">Challenge 리소스 용량 산정
&lt;/h3>&lt;p>대회 끝나고 대시보드를 보니 Challenge 문제마다 메모리 최대 사용량은 일정합니다.&lt;br>
문제 등록할때는 Request, limits를 넉넉하게 256MiB, 512MiB로 잡았습니다. 다음부터는 문제마다 섬세하게 리소스 용량를 고려해야 할 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-10.png"
width="993"
height="236"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-10_hu_45901eb02d5cc97a.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-10_hu_39a366c043b35538.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="420"
data-flex-basis="1009px"
>&lt;/p>
&lt;p>저는 CPU보다 메모리 용량이 상대적으로 부족하다고 느끼고 있습니다. 그래서 메모리 사용량을 유심히 살펴보고 있습니다.&lt;br>
여기서 &amp;ldquo;웹 애플리케이션 부분에서는 메모리가 널널하다고 하시지 않았나요?&amp;rdquo; 라고 물어볼 수 있을 것입니다.
쿠버네티스에서 멀티 노드를 구현할때 node1은 웹 애플리케이션과 기타 도구, node2는 Challenge를 위한 공간으로 분리했습니다. 즉 웹 애플리케이션이 있는 공간은 애플리케이션이 추가되지 않는 불변의 환경이고, Challenge는 언제 어디든지 리소스가 생성될 수 있는 가변의 환경입니다. 때에 따라서 메모리가 부족할 수도 널널할 수 있습니다.&lt;br>
사람들의 문제 푸는 패턴을 보니 Challenge를 생성하고 삭제하는 것을 잊습니다. 즉, 한 사람당 2~3개를 생성한 후 방치한다는 의미입니다. &lt;strong>만약에 10명 이상의 사람이 만든 Challenge가 모두 살아있다면?&lt;/strong> 이 부분은 고민을 해야봐야겠습니다.&lt;/p>
&lt;h2 id="대회는-계속된다">대회는 계속된다&amp;hellip;
&lt;/h2>&lt;p>다음 대회 일정이 잡혔습니다.
위의 내용은 주요 문제점일 뿐 실제로 크고 작은 다양한 수정사항들이 있습니다. 열심히 수정해야겠죠?&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf2025-review/image-11.png"
width="768"
height="398"
srcset="https://s0okju.github.io/p/hexactf2025-review/image-11_hu_227035725f5b0b9e.png 480w, https://s0okju.github.io/p/hexactf2025-review/image-11_hu_f1adf1221ccbfb04.png 1024w"
loading="lazy"
alt="즐기자"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p></description></item><item><title>HexaCTF 7. Challenge CR 상태 정의와 Operator 개념 정리</title><link>https://s0okju.github.io/p/hexactf-7/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-7/</guid><description>&lt;p>2025-03-04 - 내용 수정&lt;/p>
&lt;p>일반적으로 쿠버네티스의 파드는 라이프 사이클을 가지고 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-7/image-1.png"
width="720"
height="399"
srcset="https://s0okju.github.io/p/hexactf-7/image-1_hu_f53b648197a6a3f5.png 480w, https://s0okju.github.io/p/hexactf-7/image-1_hu_bef52eebabe97354.png 1024w"
loading="lazy"
alt="출처 - https://medium.com/@ollycare/a-guide-to-thekubernetes-pod-lifecycle-dc7992255001"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>이처럼 Challenge CR도 자체 라이프 사이클을 가지고 있습니다.&lt;/p>
&lt;h2 id="challenge-상태">Challenge 상태
&lt;/h2>&lt;h3 id="challenge-lifecycle">Challenge Lifecycle
&lt;/h3>&lt;p>Challenge의 라이프 사이클은 크게 3가지 형태로 나뉩니다.&lt;/p>
&lt;ul>
&lt;li>None&lt;/li>
&lt;li>Running&lt;/li>
&lt;li>Error or Deleted&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-7/image.png"
width="261"
height="321"
srcset="https://s0okju.github.io/p/hexactf-7/image_hu_8c54e86c13c588f2.png 480w, https://s0okju.github.io/p/hexactf-7/image_hu_5f5d9eec313a4595.png 1024w"
loading="lazy"
alt="challenge lifecycle"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;p>&lt;strong>Challenge 내부의 쿠버네티스 리소스가 정상적으로 생성, 삭제되었는지를 기준&lt;/strong>으로 상태가 결정됩니다.&lt;/p>
&lt;p>Challenge의 상태값이 무조건 필요한 이유가 있습니다. 바로 &lt;strong>참가자가 자신이 실행한 Challenge의 상태값&lt;/strong>을 알아야 합니다.
예를 들어볼까요? 만약에 참가자가 특정 문제의 컨테이너를 생성했다고 가정했습니다. 무슨 이유로 서버를 새로고침하게 되어 아래와 같은 서버 생성하기 버튼이 활성화가 될 것입니다. 서버 생성하기 버튼을 아무리 눌러도 쿠버네티스 상에는 컨테이너가 이미 존재하니 계속 오류가 뜨겠죠?&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-7/image-2.png"
width="410"
height="111"
srcset="https://s0okju.github.io/p/hexactf-7/image-2_hu_9c5f956acff824d4.png 480w, https://s0okju.github.io/p/hexactf-7/image-2_hu_74a0e4f73e291f27.png 1024w"
loading="lazy"
alt="출처 - CTF 사이트 DreamHack 의 VM 접속하기 버튼 "
class="gallery-image"
data-flex-grow="369"
data-flex-basis="886px"
>&lt;/p>
&lt;h3 id="challenge의-상태-구현">Challenge의 상태 구현
&lt;/h3>&lt;p>Kubebuilder에서 CR를 생성하면 &lt;code>metatdata&lt;/code>, &lt;code>spec&lt;/code>, &lt;code>status&lt;/code> 세 가지 필드를 확인할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// +kubebuilder:object:root=true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// +kubebuilder:subresource:status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Challenge is the Schema for the challenges API.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Challenge&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span> &lt;span class="s">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span> &lt;span class="s">`json:&amp;#34;metadata,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Spec&lt;/span> &lt;span class="nx">ChallengeSpec&lt;/span> &lt;span class="s">`json:&amp;#34;spec,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Status&lt;/span> &lt;span class="nx">ChallengeStatus&lt;/span> &lt;span class="s">`json:&amp;#34;status,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그 중 ChallengeStatus에 Challenge에 관한 상태 정보를 추가합니다.(&lt;code>CurrentStatus&lt;/code>) CurrentStatus는 간단한 구조체로 설계한 4개의 상태를 설정할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ChallengeStatus defines the observed state of Challenge.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChallengeStatus&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Important: Run &amp;#34;make&amp;#34; to regenerate code after modifying this file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// StartedAt: Challenge 시작 시간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">StartedAt&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span> &lt;span class="s">`json:&amp;#34;startedAt,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// CurrentStatus: Challenge 현재 상태&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">CurrentStatus&lt;/span> &lt;span class="nx">CurrentStatus&lt;/span> &lt;span class="s">`json:&amp;#34;currentStatus,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// isOne는 영속성을 나타낸다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// +optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsOne&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;isOne,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Endpoint: Challenge의 Endpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 외부에 노출될 포트 번호가 저장됩니다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Endpoint&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="s">`json:&amp;#34;endpoint,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="operator의-매커니즘">Operator의 매커니즘
&lt;/h2>&lt;h3 id="operator-sdk-vs-kubebuilder">Operator SDK vs Kubebuilder
&lt;/h3>&lt;p>Kubernetes Operator는 비단 Kubebuilder만 있는 것이 아닙니다. Operator SDK도 있습니다.&lt;/p>
&lt;p>&lt;a class="link" href="https://tiewei.github.io/posts/kubebuilder-vs-operator-sdk" target="_blank" rel="noopener"
>Tech-Reset - kubebuilder vs operator-sdk&lt;/a>의 내용을 참고하여 차이점을 설명하겠습니다.&lt;/p>
&lt;ul>
&lt;li>Operator SDK는 기본적으로 namespace-scoped, Kubebuilder cluster-scoped&lt;/li>
&lt;li>Operator SDK는 helm watcher도 함께 배포되기 때문에 Helm과 통합하기 용이하고, Kubebuilder는 kubernetes-sigs의 프로젝트와 통합이 용이하다고 합니다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>여담&lt;/strong>
유명한 CNCF 프로젝트 Operator는 대부분 Operator SDK를 사용하는 것 같습니다. 유명 CNCF 프로젝트는 Helm으로 배포하는 경우가 많은데 Operator SDK는 당연한 선택지일 수 있습니다.&lt;/p>&lt;/blockquote>
&lt;p>앞으로 Kubebuilder를 기준으로 설명하겠습니다.&lt;/p>
&lt;h3 id="쿠버네티스에서-말하는-controller">쿠버네티스에서 말하는 Controller
&lt;/h3>&lt;p>우선 Kubebuilder에 이야기 하기 전에 기본적인 쿠버네티스가 활용하는 kube-control-manager와 controller에 대한 이야기가 필요합니다.&lt;br>
쿠버네티스는 &lt;a class="link" href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/" target="_blank" rel="noopener"
>kube-control-manager&lt;/a> 통해 내장 controller들을 제어합니다.(control manager라고 부릅니다.) 기본적으로 쿠버네티스가 가지고 있는 리소스 유형에 따라 controller를 가지고 있습니다. 쿠버네티스 기본 리소스마다 특징이 뚜렷하기 때문에 역할을 확실히 나눔으로써 유지보수성이나 확장성을 높이기 위해 사용된 것으로 보입니다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>control manager 내부에 있는 controller들은 &lt;code>kube-apiserver&lt;/code> 와 통신하는 client-go등 다양한 공유 디펜던시(shared dependency)를 활용하여 다양한 기능을 수행하게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-7/image-3.png"
width="1384"
height="856"
srcset="https://s0okju.github.io/p/hexactf-7/image-3_hu_7f129315e919b981.png 480w, https://s0okju.github.io/p/hexactf-7/image-3_hu_e4c8c5048e670049.png 1024w"
loading="lazy"
alt="출처 - https://www.sobyte.net/post/2022-07/k8s-controller-manager/"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>쿠버네티스는 controller를 직접 제작함으로써 다양한 기능을 구현할 수 있습니다. 단순하게 내장된 리소스에 국한되지 않고 다양한 종류의 프로젝트를 수용할 수 있었던 것도 custom controller 덕분일 것입니다.&lt;br>
쿠버네티스는 초기부터 확장성을 고려하여 설계된 것일지도 모릅니다. &lt;strong>즉, control-manager를 직접 구현할 수 있다면 자동화된 운영, 모니터링 등 다양한 기능을 확장시킬 수 있게 됩니다.&lt;/strong>&lt;/p>
&lt;h3 id="operator-controller">Operator? Controller?
&lt;/h3>&lt;p>Kubebuilder는 오퍼레이터를 빌드하는데 사용되는 도구라고 알려져 있습니다. 오퍼레이터는 CoreOS에서 공개된 디자인 패턴으로, 단어 그대로 운영자의 역할을 소프트웨어에 새긴 개념입니다.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>위의 설명은 오퍼레이터는 기능적인 관점에서 바라보는 것이고 &lt;strong>기술적으로는 운영 대상을 제어하는 control-manager를 제작&lt;/strong>하는 것이라고 봅니다.&lt;/p>
&lt;h3 id="kubebuilder-구조에-대한-간단한-설명">kubebuilder 구조에 대한 간단한 설명
&lt;/h3>&lt;p>위의 설명을 보면 kubebuilder 아키텍쳐를 쉽게 이해할 수 있을 것입니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-7/image-4.png"
width="919"
height="826"
srcset="https://s0okju.github.io/p/hexactf-7/image-4_hu_225722d8c6f0eb82.png 480w, https://s0okju.github.io/p/hexactf-7/image-4_hu_5d7f6e3e356956f4.png 1024w"
loading="lazy"
alt="출처 - Architecture - The Kubebuilder Book"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>kubebuilder는 &lt;strong>Controller를 빌드하는 프로그램&lt;/strong>이라고 보면 됩니다.
공식 문서 상에서 Kubebuilder는 위와 같은 구조를 가지지만 실제 코드로 구현해야 할 부분은 &lt;code>Manager&lt;/code>, &lt;code>Builder&lt;/code>, &lt;code>Reconciler&lt;/code> 가 됩니다.&lt;/p>
&lt;ul>
&lt;li>Builder : controller-runtime 라이브러리를 감싸며, 일반적인 컨트롤러를 구축하기 위한 패턴을 제공한다.(&lt;a class="link" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/builder" target="_blank" rel="noopener"
>builder package 문서&lt;/a>)&lt;/li>
&lt;li>Manager : controller를 제작하는데 필요하며 client, caches, schemes등 의 공유 디펜던시를 제공한다. 컨트롤러는 Manager.Start를 호출하여 시작되어야 한다.(&lt;a class="link" href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/manager" target="_blank" rel="noopener"
>manager package 문서&lt;/a> )&lt;/li>
&lt;li>Reconciler: 조정 동기화 작업으로 대상의 상태를 원하는 상태로 일치시키는 과정을 의미한다.&lt;/li>
&lt;/ul>
&lt;p>대부분의 그림에서는 Builder에 대한 내용이 없는데 그 이유는 Operator-SDK가 Builder의 역할을 하기 때문입니다.
자세한 이야기는 Challenge 생성, 삭제 부분에서 자세하게 말씀 드리겠습니다.&lt;/p>
&lt;h3 id="challenge-cr로-operator를-제작해도-될까">Challenge CR로 Operator를 제작해도 될까?
&lt;/h3>&lt;p>&lt;a class="link" href="https://developers.redhat.com/articles/2021/06/11/kubernetes-operators-101-part-1-overview-and-key-features#operators_extend_kubernetes_to_automate_tasks" target="_blank" rel="noopener"
>Kubernetes Operators 101 Overview | Red Hat Developer&lt;/a> 문서에 의하면 오퍼레이터는 stateful한 애플리케이션을 섬세하게 관리하기 위해 사용됩니다.&lt;/p>
&lt;blockquote>
&lt;p>While Kubernetes is great at managing stateless applications, operators are useful when you need more complex configuration details for a stateful application such as a database. A stateful workload is more difficult to manage than a stateless workload.&lt;/p>&lt;/blockquote>
&lt;p>Challenge는 &lt;strong>상태 정보가 유지 되지 않는 Stateless한 애플리케이션&lt;/strong>입니다. 그러나 위의 설명을 보면 Challenge는 오퍼레이터를 사용하면 안될 것 같습니다.&lt;br>
주요 활용 대상이 Stateful한 애플리케이션일 뿐 Stateless한 리소스도 적용 가능하다고 생각합니다. lstio도 stateless한 data plane를 제어한다고 합니다.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 오퍼레이터는 운영자의 역할을 소프트웨어에 새긴 개념을 가지고 있는 만큼 모든 애플리케이션에 적용 가능하겠죠?&lt;/p>
&lt;h2 id="다음-이야기">다음 이야기
&lt;/h2>&lt;p>오퍼레이터에 대해 공부를 하다보니 쿠버네티스의 구조에 대해 파악하고 있어야만 이해가 되는 부분이 많다고 생각합니다. 쿠버네티스 기본 구조에 대해 조사해보니 이번 글에는 프로젝트에 대한 많은 이야기를 담지 못했습니다.&lt;br>
다음 글부터는 kubebuilder를 활용하여 Challenge를 생성, 삭제할 수 있는지 설명하겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="참고">참고
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://nakamasato.medium.com/kubernetes-operator-series-3-controller-runtime-component-manager-bdaf633601a3" target="_blank" rel="noopener"
>Kubernetes Operator series 3 — controller-runtime component — Manager | by Masato Naka | Medium&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nakamasato.medium.com/kubernetes-operator-series-4-controller-runtime-component-builder-c649c0ad2dc0" target="_blank" rel="noopener"
>Kubernetes Operator series 4— controller-runtime component — Builder | by Masato Naka | Medium&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.sobyte.net/post/2022-07/k8s-controller-manager/" target="_blank" rel="noopener"
>How kubernetes Controller Manager works - SoByte&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noopener"
>Controllers | Kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://www.sobyte.net/post/2022-07/k8s-controller-manager/" target="_blank" rel="noopener"
>How kubernetes Controller Manager works - SoByte&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://dev.gmarket.com/65" target="_blank" rel="noopener"
>쿠버네티스 오퍼레이터 적용하기&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a class="link" href="https://tetrate.io/blog/what-is-a-service-mesh/" target="_blank" rel="noopener"
>What is a service mesh? Architecture, features &amp;amp; relation with Kubernetes&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>HexaCTF 6. Kubebuilder를 활용한 ChallengeDefinition&amp;Challenge Type 구현</title><link>https://s0okju.github.io/p/hexactf-6/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-6/</guid><description>&lt;h2 id="이전-이야기">이전 이야기
&lt;/h2>&lt;p>이전 글에는 ChallengeDefinition, Challenge 개념을 정의하고 설계하는 과정을 설명했습니다.&lt;/p>
&lt;p>이제부터 ChallengeDefinition과 Challenge의 속성은 무엇인지 코드와 함께 소개하겠습니다.&lt;/p>
&lt;h2 id="challengedefinitionchallenge-구성">ChallengeDefinition&amp;amp;Challenge 구성
&lt;/h2>&lt;p>HexaCTF는 두 개의 쿠버네티스 CR로 구성되어 있습니다.&lt;/p>
&lt;ul>
&lt;li>ChallengeDefinition : 문제 상세 정보를 나타내며 챌린지 정보, 구성 리소스를 컴포넌트 단위로 정의한다.&lt;/li>
&lt;li>Challenge : 사용자(문제 풀이자)가 생성하는 문제의 단위로 참조된 ChallengeDefinition을 기반으로 리소스를 생성하고 삭제한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-6/image.png"
width="862"
height="492"
srcset="https://s0okju.github.io/p/hexactf-6/image_hu_8aa7f99b6fd840b5.png 480w, https://s0okju.github.io/p/hexactf-6/image_hu_dc443c05dda744a.png 1024w"
loading="lazy"
alt="ChallengeDefinition&amp;Challenge 구성도"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>이제부터 각각의 리소스가 어떤 구성요소를 가지고 있는지 설명하겠습니다.&lt;/p>
&lt;h3 id="challenge">Challenge
&lt;/h3>&lt;p>Flask 서버는 Challenge 생성 요청을 통해 사용자 이름(username)과 문제 번호(challenge_id) 얻게 됩니다. 그리고 파이썬 쿠버네티스 라이브러리를 활용하여 Challenge CR을 실행시키게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-6/image-1.png"
width="579"
height="252"
srcset="https://s0okju.github.io/p/hexactf-6/image-1_hu_c3470e8cff99fcc3.png 480w, https://s0okju.github.io/p/hexactf-6/image-1_hu_fd596b7f452226ef.png 1024w"
loading="lazy"
alt="대략적인 시스템 구성도"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;p>요구사항을 정의하자면 &lt;strong>두 개의 정보 만으로도 Challenge를 생성할 수 있어야 하며 모든 문제가 실행 가능하도록 일관된 구조를 가지고 있어야 합니다.&lt;/strong> 그래야 서버가 파일을 불러오는 형식이 아닌 Kubernetes API에 CR 생성을 요청할 수 있게 됩니다.&lt;/p>
&lt;h4 id="파일을-불러오는-방식">파일을 불러오는 방식
&lt;/h4>&lt;p>Challenge의 구조가 문제 유형마다 다르면 Challenge CR 파일을 별도로 저장해서 호출해야 합니다. 파일이 아니더라도 어떻게 다른지를 저장해야 할 것입니다.&lt;/p>
&lt;h3 id="구조">구조
&lt;/h3>&lt;h4 id="metadata">Metadata
&lt;/h4>&lt;ul>
&lt;li>name : 챌린지 이름&lt;/li>
&lt;li>namespace : Challenge를 실행시킬 namespace&lt;/li>
&lt;li>labels
&lt;ul>
&lt;li>username : 사용자 이름&lt;/li>
&lt;li>challenge_id : Challenge id&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="spec">Spec
&lt;/h4>&lt;ul>
&lt;li>definition : ChallengeDefinition 이름&lt;/li>
&lt;/ul>
&lt;p>Metadata는 go map 형식으로 이뤄져 있습니다. 그러므로 손쉽게 key를 통해서 값을 가져올 수 있게 됩니다.
직접 구조체로 명시해야 하는 부분은 바로 &lt;code>Spec&lt;/code> 입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChallengeSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Definition: ChallengeDefinition 이름&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Definition&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;definition&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kubebuilder의 명령어를 통해 코드를 CRD로 변환시킨 후 설치하는 작업을 수행합니다. (&lt;a class="link" href="https://book.kubebuilder.io/quick-start" target="_blank" rel="noopener"
>Kubebuilder 공식문서 Quickstart&lt;/a>) 모든 작업이 끝나면 아래의 yaml 파일을 통해 Challenge를 생성할 수 있게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps.hexactf.io/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Challenge&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-instance-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">apps.hexactf.io/challengeId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">apps.hexactf.io/user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 사용할 ChallengeDefinition의 이름&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">definition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-basic&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>주된 목표는 서버가 &lt;strong>사용자의 Challenge&lt;/strong>를 만드는 것입니다. 다시 말해 서버가 사용자 정보가 담긴 yaml 파일을 선언하고 실행시켜야 한다는 의미와 같습니다.&lt;/p>
&lt;p>사전에 문제 등록 과정이 있기에 사용자, Challenge에 대한 기본 정보는 저장되어 있습니다.
이후에 설명하겠지만 definition는 ChallengeDefinition의 이름으로 Challenge의 이름(제목)에 해당됩니다. 다른 말로 &lt;strong>Challenge id만으로도 definition을 알 수 있어 최소한의 정보로 Challenge를 생성할 수 있게 됩니다.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user_challenge_repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UserChallengesRepository&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge definition 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_definition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ChallengeRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_challenge_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">challenge_definition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">ChallengeNotFound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Challenge definition not found for ID: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge name 생성 및 검증&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;challenge-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_is_valid_k8s_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">UserChallengeCreationError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Invalid challenge name: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">challenge_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Challenge manifest 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge_manifest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;apps.hexactf.io/v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Challenge&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">challenge_name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;labels&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">challenge_id&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;definition&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">challenge_definition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">custom_api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_namespaced_custom_object&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apps.hexactf.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v1alpha1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">namespace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">namespace&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plural&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;challenges&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">challenge_manifest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="challengedefinition">ChallengeDefinition
&lt;/h2>&lt;p>ChallengeDefinition은 Challenge의 &lt;strong>인프라 구성을 기술하는 부분&lt;/strong>입니다. &amp;ldquo;어떤 이미지를 컨테이너로 만들어서 어떻게 네트워크를 구성할건데?&amp;rdquo; 를 명시하는 구간입니다.&lt;/p>
&lt;h3 id="구조-1">구조
&lt;/h3>&lt;h5 id="metadata-1">Metadata
&lt;/h5>&lt;ul>
&lt;li>name: 챌린지 이름(제목)&lt;/li>
&lt;/ul>
&lt;h5 id="spec-1">Spec
&lt;/h5>&lt;ul>
&lt;li>isOne : 영속성 여부입니다. 값이 True인 경우 1:1 문제 유형으로 30분 후에 삭제되어야 합니다.&lt;/li>
&lt;li>component : 쿠버네티스 리소스인 Deployment &amp;amp; Service를 하나의 Component로 정의합니다.&lt;/li>
&lt;/ul>
&lt;p>Component 내에 있는 Deployment, Service는 기존의 yaml 선언 형식과 동일합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps.hexactf.io/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ChallengeDefinition&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-basic&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">isOne&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">components&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deployment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.25&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">....&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NodePort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="challengedefinition은-deployment의-모든-필드를-지원하는-것이-아니다">ChallengeDefinition은 Deployment의 모든 필드를 지원하는 것이 아니다.
&lt;/h4>&lt;p>앞서 Component 내에 있는 Deployment는 기존의 yaml 선언 형식과 동일하다고 말씀을 드렸지만 일부는 지원하지 않습니다.&lt;/p>
&lt;p>Kubebuilder를 활용하여 코드를 제작할때 라이브러리를 통해 쿠버네티스의 리소스를 활용합니다.
Service를 예로 들면 yaml에 정의된 필드가 구조체 형식으로 선언되어 있습니다. 쿠버네티스의 리소스는 라이브러리의 구조체를 활용하는 것이라고 보면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span> &lt;span class="s">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Standard object&amp;#39;s metadata.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// +optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span> &lt;span class="s">`json:&amp;#34;metadata,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=metadata&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Spec defines the behavior of a service.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// +optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Spec&lt;/span> &lt;span class="nx">ServiceSpec&lt;/span> &lt;span class="s">`json:&amp;#34;spec,omitempty&amp;#34; protobuf:&amp;#34;bytes,2,opt,name=spec&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Most recently observed status of the service.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Populated by the system.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Read-only.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// +optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Status&lt;/span> &lt;span class="nx">ServiceStatus&lt;/span> &lt;span class="s">`json:&amp;#34;status,omitempty&amp;#34; protobuf:&amp;#34;bytes,3,opt,name=status&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>라이브러리를 적절하게 사용하여 Component의 Deployment, Service를 선언합니다.
이번 프로젝트의 경우 Service는 라이브러리에서 제공하는 구조체를 모두 사용했지만 Deployment는 필요한 부분만 추출해서 선언했습니다.
라이브러리에서 제공하는 Deployment를 사용하면 &lt;strong>Deployment의 수많은 옵션이 포함된 구조체를 Copy하는 과정에서 용량이 초과되어 CRD 생성에 실패하게 됩니다.&lt;/strong>&lt;/p>
&lt;p>ChallengeDefinition의 Deployment에서는 컨테이너 구성 부분인 Containers와 Replicas만으로 구성했습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">corev1&lt;/span> &lt;span class="s">&amp;#34;k8s.io/api/core/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metav1&lt;/span> &lt;span class="s">&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ChallengeDefinitionSpec defines the desired state of ChallengeDefinition.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChallengeDefinitionSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Important: Run &amp;#34;make&amp;#34; to regenerate code after modifying this file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// IsOne: 하나만 생성할 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// False일 경우 일정 시간 내에서만 작동된다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsOne&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;isOne,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Components: Challenge를 구성하는 컴포넌트들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Components&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="s">`json:&amp;#34;components,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Component 는 이름과 리소스를 정의&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;name,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Deployment&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">CustomDeployment&lt;/span> &lt;span class="s">`json:&amp;#34;deployment,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Service&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Service&lt;/span> &lt;span class="s">`json:&amp;#34;service,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Deployment 관련 구조체&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// CustomDeploymentSpec 는 Replicas와 Template을 정의&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 자세한 내용은 Kubernetes Deployment API 문서 참고&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CustomDeployment&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Spec&lt;/span> &lt;span class="nx">CustomDeploymentSpec&lt;/span> &lt;span class="s">`json:&amp;#34;spec,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CustomDeploymentSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Replicas&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="s">`json:&amp;#34;replicas,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Template&lt;/span> &lt;span class="nx">CustomPodTemplateSpec&lt;/span> &lt;span class="s">`json:&amp;#34;template,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CustomPodTemplateSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Spec&lt;/span> &lt;span class="nx">CustomPodSpec&lt;/span> &lt;span class="s">`json:&amp;#34;spec,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CustomPodSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Containers&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span> &lt;span class="s">`json:&amp;#34;containers,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="component-구성-이유">Component 구성 이유
&lt;/h4>&lt;p>이전 글에서 언급한 SQL Injection 사례 기억나시나요? 문제를 배포하기 위해서는 server- db가 필요하다고 말씀드렸습니다.&lt;/p>
&lt;p>문제를 실행시키기 위해서는 server는 db가 어디에 있는지 알아야 합니다.
어떤 문제를 사용하면서 사용자가 누구인지 알았지만 어떤 서비스인지 알 수 있는 방법이 있을까요? 단순히 Deployment, Service를 나열하는 구조라고 했을때 애플리케이션의 특징에 맞는 prefix를 추가하면 됩니다. 그러나 일관성이 떨어질 수 있다고 생각하여 Component 단위로 Deployment, Service를 묶게 되었습니다.&lt;/p>
&lt;h4 id="component-내-label-selector">Component 내 Label Selector
&lt;/h4>&lt;p>쿠버네티스에서 label은 중요한 역할을 합니다. 리소스 간 연결해주는 다리 역할을 합니다.&lt;/p>
&lt;p>기본적으로 쿠버네티스는 Deployment의 네트워크를 정의하기 위해서는 label selector를 통해 Service와 연결합니다. 그렇다면 ChallengeDefinition을 정의할때 label을 사용자가 지정해야 할까요?&lt;/p>
&lt;p>답은 &lt;strong>Operator가 자동으로 지정해줍니다.&lt;/strong>&lt;/p>
&lt;p>리소스의 이름에 대해 이야기를 해보겠습니다.
Challenge을 통해 생성된 리소스는 Challenge의 challenge_id, user 정보와 ChallengeDefinition에서 얻은 Component 이름을 조합한 고유한 prefix를 가지고 있습니다. 역할에 따라 deploy, svc를 추가로 붙여서 리소스의 이름을 정하게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ChallengeIdentifier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 도메인에 맞는 식별자를 생성해주는 구조체&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChallengeIdentifier&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prefix&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewChallengeIdentifier&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">challenge&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Challenge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">component&lt;/span> &lt;span class="nx">hexactfproj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeIdentifier&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// prefix 생성 (리소스 이름에 사용)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prefix&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;chall-%s-%s-%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">component&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 단일 레이블 맵 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/instance&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">prefix&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">component&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/part-of&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/managed-by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;challenge-operator&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ChallengeIdentifier&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prefix&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">prefix&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">labels&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeIdentifier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetDeploymentPrefix&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;-deploy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChallengeIdentifier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetServicePrefix&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;-svc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>또한 Challenge로부터 생성된 Deployment 리소스는 아래와 같은 레이블을 추가로 가지게 됩니다. 그 중 &lt;code>apps.hexactf.io/instance&lt;/code> Service의 &lt;code>selector&lt;/code> 로 선언하여 서로 연결해줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prefix&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;chall-%s-%s-%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/challengeId&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">component&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;apps.hexactf.io/user&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 단일 레이블 맵 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/instance&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">prefix&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">component&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/part-of&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">challenge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;apps.hexactf.io/managed-by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;challenge-operator&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="컴포넌트-간-통신은-어떻게해요">컴포넌트 간 통신은 어떻게해요?
&lt;/h4>&lt;p>SQL Injection 문제를 다시 생각해보겠습니다. Server는 데이터베이스와 통신하기 위해서 데이터베이스의 host 주소를 지정해줘야 합니다. host 주소를 어떻게 알 수 있을까요?&lt;/p>
&lt;ol>
&lt;li>자동으로 찾아준다. : 🥹&lt;/li>
&lt;li>직접 지정해준다. : IaC 도구처럼 서비스 이름을 지정해준다. 가변 인자를 삽입할 수 있는 로직을 구현해야 한다.&lt;/li>
&lt;li>localhost로 설정한다. : 일관된 host를 가질 수 있다.&lt;/li>
&lt;/ol>
&lt;p>이걸 다르게 해석할 수 있습니다.&lt;/p>
&lt;ol>
&lt;li>자동으로 찾아준다. : 🥹&lt;/li>
&lt;li>직접 지정해준다. : 다른 컴포넌트의 Service를 지정할 수 있기 때문에 컴포넌트 간 통신이 가능합니다.&lt;/li>
&lt;li>localhost로 설정한다. : 컴포넌트 간 통신이 불가능합니다. Pod 내 여러개의 컨테이너를 배포합니다.&lt;/li>
&lt;/ol>
&lt;p>3번인 &lt;strong>Pod 내에 다양한 컨테이너를 삽입하는 방향을 선택&lt;/strong>했습니다.
서비스를 지원하려면 ChallengeDefinition 구조를 크게 바꿔야 합니다. 시간 여유도 없지만 기술적으로 부담이 됩니다. 또한 2개 이상의 컴포넌트를 제공하는 경우는 드물고 대부분 제한 시간 후에 삭제되는 유형(1:1)입니다. 현재로서 급한 기능은 아니기 때문에 제외했습니다.&lt;/p>
&lt;h2 id="다음-이야기">다음 이야기
&lt;/h2>&lt;p>이번 글에서는 ChallengeDefinition과 Challenge type에 대한 구성 요소와 관련 코드를 보여드렸습니다.
이제부터 Operator 구현 시작이라고 생각합니다. &amp;ldquo;CR을 어떻게 상태 관리할래?&amp;ldquo;를 구현한 controller를 제작해야 합니다.
다음 글에는 controller 구현 부분인 &amp;ldquo;상태 관리 파트&amp;quot;로 찾아오겠습니다.&lt;/p></description></item><item><title>HexaCTF 5. Kubernetes CR를 활용한 Challenge 설계</title><link>https://s0okju.github.io/p/hexactf-5/</link><pubDate>Sat, 18 Jan 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-5/</guid><description>&lt;h2 id="이전-이야기">이전 이야기
&lt;/h2>&lt;p>이전글에서는 문제 컨테이너(Challenge)의 특징과 그에 따른 요구사항을 정의했습니다.&lt;/p>
&lt;ol>
&lt;li>컨테이너 상태를 지속적으로 확인할 수 있어야 함&lt;/li>
&lt;li>다양한 컨테이너를 하나의 구조로 직접 정의하고 관리할 수 있어야 함&lt;/li>
&lt;/ol>
&lt;p>Docker로 위의 기능을 구현하는 것은 기술적인 한계가 있으므로 Kubernetes를 선택했다고 말씀드렸습니다. Kubernetes를 통해 어떻게 CTF를 제작했는지 작성하겠습니다.&lt;/p>
&lt;h2 id="kubernetes를-선택한-이유">Kubernetes를 선택한 이유
&lt;/h2>&lt;p>글 초반에 두 가지의 요구사항은 충족되어야 한다고 말씀 드렸습니다. 쿠버네티스를 사용하면 요구사항을 충족할 수 있습니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>컨테이너 상태를 지속적으로 확인할 수 있어야 함
쿠버네티스는 기본적으로 리소스의 상태를 주기적으로 확인하며 오류 발생시 재시작을 수행하는 특징을 가지고 있습니다. 별도의 구현 없이 지속적으로 컨테이너 상태를 확인하는 기능을 활용할 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>다양한 컨테이너를 하나의 구조로 직접 정의하고 관리할 수 있어야 함&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-5/image.png"
width="1920"
height="1080"
srcset="https://s0okju.github.io/p/hexactf-5/image_hu_f66ec269c2b8996f.png 480w, https://s0okju.github.io/p/hexactf-5/image_hu_9fa085d9a7445b35.png 1024w"
loading="lazy"
alt="출처 - https://www.cncf.io/blog/2022/06/15/kubernetes-operators-what-are-they-some-examples/"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;blockquote>
&lt;p>NOTICE!
물론 쿠버네티스가 쉽다는 것은 아닙니다. 현재로서 위의 요구사항을 직접 구현한 것보다는 쿠버네티스를 활용하는 것이 현실적으로 가능한 방법이라고 생각했습니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="challenge-개념-재정의">Challenge 개념 재정의
&lt;/h2>&lt;p>기술적인 이야기를 말하기 앞서 도메인 정의가 필요합니다.&lt;/p>
&lt;h3 id="ctf-사용자-분류">CTF 사용자 분류
&lt;/h3>&lt;ul>
&lt;li>대회 운영자
&lt;ul>
&lt;li>CTF 대회 사이트를 운영하는 사람&lt;/li>
&lt;li>문제 발생 시 즉시 해결해야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문제 출제자
&lt;ul>
&lt;li>문제 파일을 제작 후 운영자에게 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>대회 참가자
&lt;ul>
&lt;li>CTF 사이트에서 제공한 문제를 해결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>대회 운영 방식마다 각 역할이 하는 범위는 달라질 것입니다. 그러나 저희 프로젝트에서는 문제 등록과 리소스 관리를 대회 운영자가 하기로 결정했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-5/image-1.png"
width="1006"
height="507"
srcset="https://s0okju.github.io/p/hexactf-5/image-1_hu_995a9d39471bf59b.png 480w, https://s0okju.github.io/p/hexactf-5/image-1_hu_8c6e4b2059596945.png 1024w"
loading="lazy"
alt="역할에 따른 Challenge 구성도"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h3 id="개념-정의">개념 정의
&lt;/h3>&lt;p>쿠버네티스를 적용하기 이전에 개념을 다시 정리해봅시다.&lt;/p>
&lt;p>사전에 등록한 문제를 사용자가 실행시키기 위해서는 어떻게 해야할까요?&lt;br>
등록하는 &lt;strong>사람은 문제(Challenge) 컨테이너에 대한 구성을 정의하고 사용자는 그 정의한 내용을 그대로 실행시키는 것입니다.&lt;/strong> 생성된 문제들은 사용자 정보를 기준으로 식별되어야 합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-5/image-2.png"
width="664"
height="315"
srcset="https://s0okju.github.io/p/hexactf-5/image-2_hu_3ab6201f1884f269.png 480w, https://s0okju.github.io/p/hexactf-5/image-2_hu_71bdb1956457a80c.png 1024w"
loading="lazy"
alt="Challenge 생성 특징"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p>그렇다면 문제를 생성하기 위해서는 최종적으로 두 가지가 필요하게 됩니다.&lt;/p>
&lt;ul>
&lt;li>문제 정의서(ChallengeDefinition)&lt;/li>
&lt;li>사용자의 정보가 포함된 문제(Challenge)&lt;/li>
&lt;/ul>
&lt;p>이제부터 문제 정의서와 사용자가 풀어야 하는 문제를 ChallengeDefinition과 Challenge라고 부르겠습니다.&lt;/p>
&lt;h2 id="cr로-challengedefinition과-challenge-정의하기">CR로 ChallengeDefinition과 Challenge 정의하기
&lt;/h2>&lt;h3 id="프로젝트에서-kubernetes-operator를-사용하는-방법">프로젝트에서 Kubernetes Operator를 사용하는 방법
&lt;/h3>&lt;p>Kubernetes Operator는 사용자가 정의한 리소스(CR)를 관리하는 프로그램입니다. 즉, 오퍼레이터를 제작한다는 것은 사용자가 정의한 리소스를 모니터링하는 루프를 실행시키는 프로그램을 제작한다는 의미입니다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>리소스를 모니터링한다는 것은 상태를 관리한다는 의미와 같습니다. 그 대상은 상태 라이프사이클을 가질 것입니다&lt;/strong> Kubernetes Operator SDK (kubebuilder, kopf &amp;hellip;)를 활용하여 상태 라이프사이클을 정의하고 구현할 수 있게 됩니다. Kubernetes Operator의 활용은 요구사항 모두 충족할 수 있습니다.&lt;/p>
&lt;p>이번 프로젝트에서는 Challenge의 Controller로서 Kubernetes Operator를 구현할 예정입니다.&lt;/p>
&lt;h3 id="crcustom-resourcecrdcustom-resource-definition">CR(Custom Resource)&amp;amp;CRD(Custom Resource Definition)
&lt;/h3>&lt;p>직접 정의한 리소스의 스펙을 CRD(CustomResourceDefinition)으로 정의한 후 스펙에 맞게 CR(CustomResource)를 생성하는 YAML를 실행시키면 커스텀 리소스를 실행시킬 수 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>CR&amp;amp;CRD에 대한 기술적인 내용은 ccambo님의 &lt;a class="link" href="https://ccambo.tistory.com/entry/Kubernetes-%ED%99%95%EC%9E%A5%EC%9D%B8-CRD%EC%99%80-CR-%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener"
>Kubernetes 확장인 CRD와 CR 에 대한 개념 정리&lt;/a> 를 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;p>원하는 리소스를 직접 정의해서 배포할 수 있다는 특징은 요구사항 2번인 &amp;ldquo;다양한 컨테이너를 하나의 구조로 직접 정의한다&amp;quot;를 가능하게 만들어줍니다.
이번 프로젝트에서는 CR&amp;amp;CRD를 적극적으로 활용할 예정입니다.&lt;/p>
&lt;h3 id="challengedefinitionchallenge-간단하게-정의하기">ChallengeDefinition&amp;amp;Challenge 간단하게 정의하기
&lt;/h3>&lt;p>이번 프로젝트에서는 두 개의 커스텀 리소스를 생성할 것입니다.&lt;/p>
&lt;ul>
&lt;li>ChallengeDefinition : 문제 상세 정보를 나타내면 챌린지 정보, 구성 리소스를 컴포넌트 단위로 정의한다. CTF 문제를 등록할때 &lt;code>ChallengeDefinition&lt;/code>을 등록한다.&lt;/li>
&lt;li>Challenge : 사용자 정보를 metadata에 주로 저장하고 spec으로 &lt;code>ChallengeDefinition&lt;/code>를 참조하여 정의한다. 주로 사용자가 챌린지 컨테이너를 생성하고 실행할때 &lt;code>Challenge&lt;/code>를 정의하고 실행시킨다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-5/image-3.png"
width="862"
height="492"
srcset="https://s0okju.github.io/p/hexactf-5/image-3_hu_c7cc7fbe726d4d4c.png 480w, https://s0okju.github.io/p/hexactf-5/image-3_hu_ba57c42f629ce5bc.png 1024w"
loading="lazy"
alt="ChallengeDefinition&amp;Challenge 구체적인 구성도"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;h4 id="왜-저렇게-구성했을까요">왜 저렇게 구성했을까요?
&lt;/h4>&lt;p>구체적인 이유는 뒤에 구현과 함께 설명할 예정입니다. 간단하게 말씀드리자면 &lt;strong>모든 리소스가 사용자마다 식별 가능해야 합니다.&lt;/strong>&lt;br>
사용자의 고유 데이터, 문제의 고유 데이터를 가지고 ChallengeDefinition에 정의된 리소스들이 서로 식별 가능하도록 이름을 정할 것입니다. 그래야 동일한 리소스더라도 충돌이 발생하지 않을 것입니다.&lt;/p>
&lt;h2 id="다음-이야기">다음 이야기
&lt;/h2>&lt;p>지금까지 Challenge라는 개념을 재정의하고 Kubernetes 커스텀 리소스로써 어떻게 구성할 것인지 작성했습니다.&lt;br>
다음 글에서는 어떻게 코드로 ChallengeDefinition, Challenge를 구현했는지 설명하겠습니다.&lt;/p>
&lt;h2 id="reference">Reference
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://ccambo.tistory.com/entry/Kubernetes-%ED%99%95%EC%9E%A5%EC%9D%B8-CRD%EC%99%80-CR-%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener"
>Kubernetes 확장인 CRD와 CR 에 대한 개념 정리&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://bcho.tistory.com/1391" target="_blank" rel="noopener"
>간단하게 알아보는 Kubernetes Operator의 개념과 Kopf 프레임웍&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>쿠버네티스 오퍼레이터. 제이슨 도비스, 조슈아 우드 지음, 에이콘&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>HexaCTF 4. Docker를 활용한 Challenge 설계 및 한계점</title><link>https://s0okju.github.io/p/hexactf-4/</link><pubDate>Thu, 16 Jan 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-4/</guid><description>&lt;ul>
&lt;li>2025.01.18: 제목 수정&lt;/li>
&lt;/ul>
&lt;h2 id="ctf의-문제-특징">CTF의 문제 특징
&lt;/h2>&lt;h3 id="문제-종류">문제 종류
&lt;/h3>&lt;p>Challenge를 어떻게 구성할 것인가를 생각하기 전에 문제 배포 관점에서 CTF 문제 종류를 파악해야 합니다.
크게 5가지의 카테고리가 있으며 문제를 출제하는 방식은 크게 두 가지있습니다.&lt;/p>
&lt;ul>
&lt;li>Live : 실제로 운영중인 서버를 통해 문제를 푸는 경우&lt;/li>
&lt;li>File : 파일을 다운받아서 문제를 푸는 경우&lt;/li>
&lt;/ul>
&lt;p>Live 방식 중에서 두 가지를 더 나눌 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>1:1 : 한 사람당 고유한 서버에 접속해야 하는 경우, 주로 상태가 있는(Stateful) 애플리케이션 문제에 적합&lt;/li>
&lt;li>1:N : 하나의 서버에 여러 사람이 접속해야 하는 경우, 주로 상태가 없는(Stateless) 애플리케이션의 문제에 적합&lt;/li>
&lt;/ul>
&lt;p>예를 한번 들어보겠습니다.
단순하게 nginx, server로만 구성된 간단한 XSS 문제가 있다고 생각해봅시다.&lt;br>
자바스크립트 코드를 삽입해 악의적인 행위를 하는 공격 방법입니다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> XSS CTF 문제에서는 의도한 악의적인 행위를 수행하면 플래그를 반환하게 됩니다.&lt;br>
이때 여러 사람들이 동일한 XSS 문제 사이트 접속했을때 서로 영향을 받을까요? 그렇지 않습니다. 사용자는 자신만의 독립적인 환경에서 nginx가 반환하는 자바스크립트를 사용하고 있기 때문에 서로 영향을 받지 않게 되는 것입니다. 이런 문제 유형은 위에서 말한 1:N 방식을 사용하게 됩니다.&lt;/p>
&lt;p>SQL Injection 문제를 생각해봅시다.
SQL Injection을 시도하기 위해 다양한 명령어를 시도하게 됩니다. 그 과정에서 문제를 해결한 사람의 데이터를 확인할 수 있게 됩니다. 이는 대회에 큰 영향을 주기 때문에 사용자마다 격리가 필요합니다.(서로 독립된 데이터베이스를 가져야 합니다.) 이런 문제 유형은 위에서 말한 1:1 방식을 사용하게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-4/image.png"
width="670"
height="592"
srcset="https://s0okju.github.io/p/hexactf-4/image_hu_67fc72af7361ccf5.png 480w, https://s0okju.github.io/p/hexactf-4/image_hu_89283d698eddbe03.png 1024w"
loading="lazy"
alt="CTF 문제 구성도"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;h3 id="주목할만한-특징">주목할만한 특징
&lt;/h3>&lt;p>Live 1:1 서비스는 자원 낭비를 최소화하기 위해 문제가 실행된지 30분 후에 자동으로 삭제가 됩니다. 대부분의 CTF 문제 풀이 사이트는 특정 문제에 제한 시간을 두는 등 많이 사용하는 방식입니다.&lt;/p>
&lt;ul>
&lt;li>Live 1:1 서비스 : 실행한지 30분이 지나면 삭제되어야 한다.&lt;/li>
&lt;/ul>
&lt;p>CTF 대회를 많이 경험해본 친구에게 제한 시간을 걸어두는 것에 대해 의견을 나눈 적이 있습니다. 친구가 말하길 중간에 시간 만료로 문제 사이트가 다운되더라도 일반적인 현상으로 받아들인다고 합니다.&lt;/p>
&lt;h2 id="문제-컨테이너-초기-구성-1---docker-사용">문제 컨테이너 초기 구성 (1) - Docker 사용
&lt;/h2>&lt;p>Python Docker SDK를 활용해서 도커를 생성하고 삭제할 수 있습니다. 초기에는 간단하게 Docker SDK를 사용하는 방식을 채택했습니다.&lt;/p>
&lt;h3 id="컨테이너의-무한-증식을-막아라">컨테이너의 무한 증식을 막아라
&lt;/h3>&lt;p>동일한 프로젝트를 수행한 동아리원을 만나게 되었습니다. 프로젝트 관련된 이야기를 하다가 &lt;strong>컨테이너의 무한 증식으로 인한 서버 과부하 현상 해결이 필요하다는 의견을 받았습니다.&lt;/strong>&lt;/p>
&lt;p>제가 예상한 문제의 원인은 다음과 같습니다.&lt;/p>
&lt;ol>
&lt;li>문제 생성을 요청할때 문제 컨테이너 실행 상태를 검증하지 않거나 저장된 상태와 실제 상태에 불일치가 발생했다.&lt;/li>
&lt;li>컨테이너 이름에 사용자 식별값 + 난수가 섞여 있다.&lt;/li>
&lt;/ol>
&lt;p>문제 생성을 요청할때 문제 컨테이너 실행 상태를 검증하지 않았다면 데이터베이스에 값을 저장하면 됩니다. &lt;strong>문제는 저장된 상태와 실제 상태에 불일치가 발생을 어떻게 해결할 것인가 입니다.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-4/image-1.png"
width="790"
height="742"
srcset="https://s0okju.github.io/p/hexactf-4/image-1_hu_b1127a67be3ee039.png 480w, https://s0okju.github.io/p/hexactf-4/image-1_hu_4e379ba41e41ca26.png 1024w"
loading="lazy"
alt="Docker 서버 구성도"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;h3 id="상태-불일치-해결방안은-간단하지만-구현하기-어렵다">상태 불일치 해결방안은 간단하지만 구현하기 어렵다.
&lt;/h3>&lt;p>데이터베이스에 저장된 상태와 실제 상태의 불일치를 해결하는 방법은 &lt;strong>주기적으로 대상을 확인&lt;/strong>하는 것이라고 생각합니다.
단순하게 하나의 애플리케이션만 주기적으로 상태를 확인하는 것은 비교적 구현이 쉽습니다. 그러나 컨테이너가 여러개인 경우에는 병렬 처리로 인해 구현 난이도가 올라가게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-4/image-2.png"
width="700"
height="250"
srcset="https://s0okju.github.io/p/hexactf-4/image-2_hu_a7edf729cd76099f.png 480w, https://s0okju.github.io/p/hexactf-4/image-2_hu_a102f2d1a2858878.png 1024w"
loading="lazy"
alt="출처 - https://kwahome.medium.com/concurrency-is-not-parallelism-a5451d1cde8d"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="672px"
>&lt;/p>
&lt;p>상태 불일치를 확인해야 하는 대상은 Live이면서 한사람당 하나의 컨테이너가 배포되어야 하는 1:1 서비스일 것입니다. 그런데 시간 만료로 인해 문제 컨테이너는 자주 삭제되고 생성됩니다. 2개의 1:1 문제를 출제한다고 가정했을때 10명이 문제에 접속한다고 한다면 컨테이너의 총합은 절대 작은 숫자는 아닙니다.&lt;br>
이러한 상황에서 한정된 자원 내에 일반적인 방법(순차적)으로 서비스를 찾고 대상을 지속적으로 확인하는 것은 비효율적입니다. 그러므로 병렬처리 또는 동시성 처리를 통해 효율성을 높이는 작업이 필요하게 됩니다.&lt;/p>
&lt;h3 id="컨테이너-패키지-문제">컨테이너 패키지 문제
&lt;/h3>&lt;p>SQL Injection 문제를 출제한다고 가정하겠습니다. nginx, server, db 컨테이너 3개가 필요하게 됩니다. 관리하는 사람 입장에서는 3개를 일괄적으로 관리하는 것이 효율적입니다.&lt;br>
이와 같은 기능을 하는 것이 docker-compose입니다. docker-compose를 사용하여 여러개의 컨테이너를 하나의 서비스로 구성해서 관리할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-4/image-3.png"
width="800"
height="262"
srcset="https://s0okju.github.io/p/hexactf-4/image-3_hu_cccb9a68fdafc357.png 480w, https://s0okju.github.io/p/hexactf-4/image-3_hu_9d1be009d35bf0af.png 1024w"
loading="lazy"
alt="출처 - https://dev.to/arif_hossain/introduction-to-docker-compose-ddh"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="732px"
>&lt;/p>
&lt;p>그러나 별도의 파이썬 라이브러리로 제공되지 않고 subprocess에 명령어 형태로 구현해야 합니다. 구현하더라도 잘 안되는 경우가 있습니다.&lt;br>
사용자마다 고유한 컨테이너를 가져야 한다는 것은 다른 말로 각각 고유한 컨테이너 이름을 가져야 한다는 것과 같습니다. 결국 일반적인 docker-compose 만으로는 문제 컨테이너를 만드는데 한계가 있으며 원활한 처리를 위해서는 직접 구조를 정의해야 합니다.&lt;/p>
&lt;h3 id="요구사항">요구사항
&lt;/h3>&lt;ol>
&lt;li>컨테이너 상태를 지속적으로 확인&lt;/li>
&lt;li>다양한 컨테이너를 하나의 구조로 직접 정의하고 관리&lt;/li>
&lt;/ol>
&lt;p>위의 요구사항을 충족하기 위해서는 기능을 처음부터 구현해야 합니다.
시간이 많이 소요되며 궁극적인 목표인 CTF 대회 개최와 멀어질 수 있다고 생각했습니다.&lt;/p>
&lt;h2 id="다음화---kubernetes-사용">다음화 - Kubernetes 사용
&lt;/h2>&lt;p>지금까지 CTF 문제 컨테이너를 docker로 설계하면서 느낀 한계점에 대해 설명했습니다.&lt;br>
팀원들과 상의해본 결과 docker만으로는 우리가 원하는 기술을 구현할 수 없다고 결론을 지었습니다. 그 대신 주기적으로 리소스의 상태를 확인할 수 있으며 CR를 통해 커스텀으로 리소스를 정의할 수 있는 쿠버네티스를 선택하게 되었습니다.&lt;br>
다음 글에서는 쿠버네티스를 통해 어떻게 설계했는지 설명하겠습니다.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://www.skshieldus.com/blog-security/security-trend-idx-06" target="_blank" rel="noopener"
>XSS(크로스 사이트 스크립트)란? 공격 유형부터 보안대책까지! | SK쉴더스&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>HexaCTF - 3. Jenkins를 활용한 CI 환경 구성하기</title><link>https://s0okju.github.io/p/hexactf-3/</link><pubDate>Sun, 05 Jan 2025 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-3/</guid><description>&lt;h2 id="jenkins-환경-구성">Jenkins 환경 구성
&lt;/h2>&lt;h3 id="어디에-젠킨스를-설치해야-할까">어디에 젠킨스를 설치해야 할까?
&lt;/h3>&lt;p>쿠버네티스를 처음 공부했을때 “쿠버네티스 내에 데이터베이스를 운영하는 것이 과연 안전할까?”에 대해 의문점을 가지게 되었습니다. 데이터 손실이 우려된다는 과거의 의견과 달리 현재는 다양한 기업들이 DBaaS를 도입하고 있었습니다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;br>
이런 흐름으로 젠킨스 또한 쿠버네티스 내에 운영할까요? 레딧과 같은 지식 공유 플랫폼을 종합해보면 쿠버네티스 내에 젠킨스를 운영하는
경우가 많이 보입니다.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;br>
그러나 저희 프로젝트는 CI를 담당하는 팀원은 따로 있습니다. 완전한 역할 분리를 위해 인스턴스에 따로 젠킨스를 설치하게 되었습니다.&lt;/p>
&lt;h3 id="jenkins-배포">Jenkins 배포
&lt;/h3>&lt;p>아래는 대략적인 아키텍쳐입니다. 여기서 중요한 점은 Jenkins 인스턴스와 쿠버네티스 노드와 연결되어야 합니다. 각각의 서브넷이 라우터로 연결하여 서로 통신할 수 있도록 설정해야 합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image.png"
width="1100"
height="287"
srcset="https://s0okju.github.io/p/hexactf-3/image_hu_f06e3dff2c2ab5c8.png 480w, https://s0okju.github.io/p/hexactf-3/image_hu_9381f73eecfd8e3c.png 1024w"
loading="lazy"
alt="간단한 구성도"
class="gallery-image"
data-flex-grow="383"
data-flex-basis="919px"
>&lt;/p>
&lt;p>Jenkins를 인스턴스로 배포하고 외부 IP(Floating IP)로 연결하는 부분은 생략하겠습니다.
이전 글에서 언급한 것처럼 하나의 라우터에 여러 개의 포트를 연결하고 싶다면 openstack_networking_port_v2 함수를 활용해야 한다고 말했습니다. 이도 동일하게 Jenkins가 포함되어 있는 서브넷에 포트를 생성하여 쿠버네티스 라우터에 연결합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_port_v2&amp;#34; &amp;#34;devops_kubernetes_router_port&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;kubernetes-devops-port&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> network_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_network_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">devops_network&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> admin_state_up&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fixed_ip&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> subnet_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_subnet_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">devops_subnet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> ip_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">devops_port_address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_router_interface_v2&amp;#34; &amp;#34;devops_kubernetes_interface&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> router_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_router_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">kubernetes_router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_port_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">devops_kubernetes_router_port&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>배포를 모두 끝내면 아래와 같은 토폴로지를 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image-1.png"
width="1098"
height="764"
srcset="https://s0okju.github.io/p/hexactf-3/image-1_hu_72cf2be9378ebb5.png 480w, https://s0okju.github.io/p/hexactf-3/image-1_hu_5f6e1d81653f6735.png 1024w"
loading="lazy"
alt="Openstack 네트워크 토폴로지"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;h2 id="harbor">Harbor
&lt;/h2>&lt;h3 id="쿠버네티스-환경에서-ci">쿠버네티스 환경에서 CI
&lt;/h3>&lt;p>쿠버네티스 환경에서 CI 과정은 컨테이너를 빌드하고 이미지를 저장하는 프로세스가 포함됩니다. 그 중 이미지를 저장하기 위해서는 도커 레지스트리가 필요합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image-2.png"
width="720"
height="443"
srcset="https://s0okju.github.io/p/hexactf-3/image-2_hu_307d455d43ccf37d.png 480w, https://s0okju.github.io/p/hexactf-3/image-2_hu_20a9e7be839d274b.png 1024w"
loading="lazy"
alt="출처 - https://thenewstack.io/ci-cd-with-kubernetes-tools-and-practices/"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;h3 id="도커-레지스트리">도커 레지스트리
&lt;/h3>&lt;p>도커 레지스트리는 도커 이미지를 관리하는 저장소 입니다. 저장소는 크게 public과 private이 있습니다. 내부적으로 사용할 예정이므로 private 레지스트리를 선택하게 되었습니다.&lt;/p>
&lt;p>후보는 크게 두 가지입니다.&lt;/p>
&lt;ul>
&lt;li>Docker Registry&lt;/li>
&lt;li>Harbor&lt;/li>
&lt;/ul>
&lt;p>도커 레지스트리 선정 기준은 “깔끔한 UI를 가지고 있는가?” 입니다. 후보 중에는 기준에 부합한 플랫폼은 Harbor였습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image-3.png"
width="1100"
height="313"
srcset="https://s0okju.github.io/p/hexactf-3/image-3_hu_95b24d92b56a31b6.png 480w, https://s0okju.github.io/p/hexactf-3/image-3_hu_805930a03405b52f.png 1024w"
loading="lazy"
alt="출처 - 공식 문서"
class="gallery-image"
data-flex-grow="351"
data-flex-basis="843px"
>&lt;/p>
&lt;h3 id="설치">설치
&lt;/h3>&lt;p>공식 문서를 참고해서 helm 파일을 다운로드 받습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">helm repo add harbor https://helm.goharbor.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm fetch harbor/harbor --untar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>가장 먼저 해야하는 것은 Volume에 대한 설정입니다. Harbor는 다양한 PVC를 요청합니다. 프로젝트는 Dynamic Provisioning을 위한 NFS 환경을 구축했습니다. 그러므로 values.yaml 에 strageClass만 값을 입력하면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Use the existing PVC which must be created manually before bound,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># and specify the &amp;#34;subPath&amp;#34; if the PVC is shared with other components&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">existingClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Specify the &amp;#34;storageClass&amp;#34; used to provision the volume. Or the default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># StorageClass will be used (the default).&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Set it to &amp;#34;-&amp;#34; to disable dynamic provisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;nfs-client&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">subPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">accessMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jobservice&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jobLog&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">existingClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;nfs-client&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">subPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">accessMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>환경 설정을 다 하고 배포하면 정상적으로 작동됩니다.&lt;/p>
&lt;h2 id="jenkins--harbor-연결하기">Jenkins — Harbor 연결하기
&lt;/h2>&lt;h3 id="http로-연결하기">HTTP로 연결하기
&lt;/h3>&lt;p>젠킨스 인스턴스가 쿠버네티스 내부에 있는 Harbor에 이미지를 저장해야 합니다. 저희 환경에서는 Harbor를 nodePort로 연결하여 도커 레지스트리에 연결할 수 있도록 설정하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image-4.png"
width="582"
height="282"
srcset="https://s0okju.github.io/p/hexactf-3/image-4_hu_6b69d058954a6de0.png 480w, https://s0okju.github.io/p/hexactf-3/image-4_hu_7198799d8e08f5f2.png 1024w"
loading="lazy"
alt="젠킨스 - 쿠버네티스 연결 흐름"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>Harbor와 같은 도커 레지스티의 경우 HTTPS로 연결하는 것을 권장합니다. 하지만 저희는 HTTP로 설정하겠습니다.
Harbor의 우선 nodePort를 30002로 설정한 후 externalURL 에 http가 포함된 URL를 설정해야 합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">externalURL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://10.0.10.156:30002&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>젠킨스 인스턴스에서 &lt;code>/etc/docker/daemon.json&lt;/code> 파일에 HTTP를 적용할 harbor의 host를 명시해줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">{&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#34;insecure-registries&amp;#34;: &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;http://10.0.10.156:30002&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>도커를 재시작하면 위의 설정이 적용됩니다.&lt;/p>
&lt;h3 id="jenkins-pipeline-설정">Jenkins Pipeline 설정
&lt;/h3>&lt;p>Credential 설정등은 생략하겠습니다.
도커를 빌드하기 위해서는 크게 3가지 과정이 필요합니다.&lt;/p>
&lt;ol>
&lt;li>도커 빌드&lt;/li>
&lt;li>도커 이미지 Tagging&lt;/li>
&lt;li>도커 이미지 Push&lt;/li>
&lt;/ol>
&lt;p>젠킨스는 프로젝트 단위로 이미지를 관리합니다. 아래의 코드는 ubuntu 이미지를 빌드하여 test 프로젝트에 이미지를 push하는 것을 보여줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pipeline {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> agent any
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DOCKER_REGISTRY = &amp;#34;10.0.10.156:30002&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IMAGE_NAME = &amp;#34;ubuntu&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TARGET_REPO = &amp;#34;test/ubuntu&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stages {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stage(&amp;#39;Pull Ubuntu Image&amp;#39;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Pulling the Ubuntu image from Docker Hub...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sh &amp;#34;docker pull ${IMAGE_NAME}:latest&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stage(&amp;#39;Tag Image&amp;#39;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Tagging the image for Harbor...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sh &amp;#34;docker tag ${IMAGE_NAME}:latest ${DOCKER_REGISTRY}/${TARGET_REPO}:latest&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stage(&amp;#39;Push Image to Harbor&amp;#39;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Pushing the image to Harbor...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> withDockerRegistry([credentialsId: &amp;#39;harbor-credentials&amp;#39;, url: &amp;#34;http://${DOCKER_REGISTRY}&amp;#34;]) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sh &amp;#34;docker push ${DOCKER_REGISTRY}/${TARGET_REPO}:latest&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> post {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> always {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Cleaning up Docker images...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sh &amp;#34;docker rmi ${IMAGE_NAME}:latest || true&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sh &amp;#34;docker rmi ${DOCKER_REGISTRY}/${TARGET_REPO}:latest || true&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이미지를 push하면 정상적으로 작동됨을 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-3/image-5.png"
width="1100"
height="222"
srcset="https://s0okju.github.io/p/hexactf-3/image-5_hu_f0c8cfc782bec904.png 480w, https://s0okju.github.io/p/hexactf-3/image-5_hu_bca97cd70a32e092.png 1024w"
loading="lazy"
alt="자동화 빌드 결과"
class="gallery-image"
data-flex-grow="495"
data-flex-basis="1189px"
>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://sungchul-p.github.io/db-on-k8s-case-study" target="_blank" rel="noopener"
>https://sungchul-p.github.io/db-on-k8s-case-study&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://engineering.linecorp.com/ko/blog/declarative-cloud-db-service-using-kubernetes" target="_blank" rel="noopener"
>https://engineering.linecorp.com/ko/blog/declarative-cloud-db-service-using-kubernetes&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a class="link" href="https://www.reddit.com/r/devops/comments/m3lc3r/jenkins_inside_kubernetes_or_not/" target="_blank" rel="noopener"
>https://www.reddit.com/r/devops/comments/m3lc3r/jenkins_inside_kubernetes_or_not/&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>HexaCTF - 2. Openstack Terraform을 활용한 NFS 서버 설치 및 활용</title><link>https://s0okju.github.io/p/hexactf-2/</link><pubDate>Fri, 29 Nov 2024 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-2/</guid><description>&lt;h2 id="전체-아키텍쳐-구성도">전체 아키텍쳐 구성도
&lt;/h2>&lt;p>저희 프로젝트는 크게 3개의 서브넷을 가지게 됩니다.&lt;/p>
&lt;ul>
&lt;li>Kubernetes Subnet
&lt;ul>
&lt;li>Kubernetes Master, Worker nodes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Storage Subnet
&lt;ul>
&lt;li>NFS Server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DevOps Subnet
&lt;ul>
&lt;li>Jenkins Server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image.png"
width="1064"
height="763"
srcset="https://s0okju.github.io/p/hexactf-2/image_hu_ea2064f9e1730b7c.png 480w, https://s0okju.github.io/p/hexactf-2/image_hu_34ea0a13599035a7.png 1024w"
loading="lazy"
alt="전체 네트워크 토폴로지"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;h2 id="nfs-아키텍쳐-구성">NFS 아키텍쳐 구성
&lt;/h2>&lt;h3 id="왜-필요할까">왜 필요할까?
&lt;/h3>&lt;h4 id="상태값-저장">상태값 저장
&lt;/h4>&lt;p>저희 프로젝트는 쿠버네티스 환경에서 수행하게 됩니다. 그 과정에서 데이터베이스와 같이 상태를 저장해야 하는 애플리케이션이 필요하게 됩니다. 관리자는 PV로 스토리지를 정의하고 상태 저장이 필요한 애플리케이션의 PVC를 활용하여 데이터를 영구적으로 저장하게 됩니다.
PV는 로컬 디스크에 저장하거나 NFS와 같은 통신이 필요한 스토리지 시스템으로 정의할 수 있습니다. 로컬 디스크에 저장한다는 것은 Worker node의 디스크에 저장한다는 말과 같습니다. 그러므로 데이터 저장소를 외부와 분리하고자 NFS를 사용하게 되었습니다.&lt;/p>
&lt;h4 id="dynamic-provisioning">Dynamic Provisioning
&lt;/h4>&lt;p>NFS를 선택한 핵심적인 이유입니다. 애플리케이션이 스토리지 사용을 위해 PVC를 요청하게 되면 요구사항에 맞는 PV에 바인딩하게 됩니다. 모든 작업마다 그에 상응하는 PV-PVC 쌍을 만들어야 한다는 것과 같습니다. 불편함을 해소하기 위해서 PVC 요청에 대한 PV를 생성하는 과정을 자동화는 Dynamic Provisioning을 활용하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-1.png"
width="834"
height="509"
srcset="https://s0okju.github.io/p/hexactf-2/image-1_hu_c10d44b34ed51e15.png 480w, https://s0okju.github.io/p/hexactf-2/image-1_hu_59108b20283660b5.png 1024w"
loading="lazy"
alt="출처 - https://www.unixarena.com/2022/04/kubernetes-storage-dynamic-nfs-client-provisioner.html/"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;h3 id="nfs-in-nova-vs-manila">NFS in Nova vs Manila
&lt;/h3>&lt;p>데이터베이스를 구축하는 방법으로 EC2 Instance에서 DB 엔진을 직접 설치하듯이 NFS로 직접 인스턴스에 직접 설치할 수 있는 방법이 있습니다.
Openstack에는 NFS를 직접 설치할 수 있도록 &lt;a class="link" href="https://docs.openstack.org/manila/latest/" target="_blank" rel="noopener"
>Manila&lt;/a>라는 파일 공유 서비스를 제공해줍니다.&lt;/p>
&lt;p>공식문서에 의하면 NFS는 아래와 같은 기능을 목표로 삼습니다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;ul>
&lt;li>Component based architecture: Quickly add new behaviors&lt;/li>
&lt;li>Highly available: Scale to very serious workloads&lt;/li>
&lt;li>Fault-Tolerant: Isolated processes avoid cascading failures&lt;/li>
&lt;li>Recoverable: Failures should be easy to diagnose, debug, and rectify&lt;/li>
&lt;li>Open Standards: Be a reference implementation for a community-driven api&lt;/li>
&lt;/ul>
&lt;p>그 이외에도 통합적인 대시보드, 모니터링, 로깅 도구를 활용할 수 있다는 것이 큰 장점입니다.
그럼에도 Manila가 아닌 &lt;strong>Nova에 NFS를 설치하는 방안&lt;/strong>을 선택했습니다.
선택한 가장 큰 이유는 &lt;strong>어렵다&lt;/strong>는 것입니다. 프로젝트 이전에 &lt;a class="link" href="https://medium.com/s0okju-tech/opsathlan-scenario-3-1-hello-mysql-28965a7bc466" target="_blank" rel="noopener"
>데이터베이스 시스템인 trove를 설치한 경험이 있었습니다. &lt;/a> 원인을 찾았지만 해결하지 못한 경험이 있었습니다. 클라우드에 적합한 시스템이라 네트워크, 인증 등 고려사항이 많다고 느꼈습니다. 소규모에 쉬운 방법으로 하나의 인스턴스에서 nfs-server에 설치하는 방식을 선택했습니다.&lt;/p>
&lt;h3 id="nfs-설치하기">NFS 설치하기
&lt;/h3>&lt;p>설치하기 이전에 NFS 요구사항에 대해 생각해보겠습니다.&lt;/p>
&lt;h4 id="nfs-네트워크-요구사항">NFS 네트워크 요구사항
&lt;/h4>&lt;ul>
&lt;li>쿠버네티스 서브넷과 통신해야 한다.&lt;/li>
&lt;li>nfs server를 설치하기 위해 외부와 통신해야 한다.&lt;/li>
&lt;/ul>
&lt;p>위의 요구사항에 맞게 storage subnet은 public, kubernetes subnet의 router로 연결했습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-2.png"
width="789"
height="750"
srcset="https://s0okju.github.io/p/hexactf-2/image-2_hu_844b9b0fc6631666.png 480w, https://s0okju.github.io/p/hexactf-2/image-2_hu_98afd115106ed716.png 1024w"
loading="lazy"
alt="네트워크 토폴로지"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h3 id="terraform-으로-구성하기">Terraform 으로 구성하기
&lt;/h3>&lt;h4 id="네트워크">네트워크
&lt;/h4>&lt;p>storage라는 prefix를 가진 network와 subnet를 만들어줍니다. 그리고 라우터를 정의하여 서로 다른 네트워크를 연결합니다.
Openstack의 Neutron의 경우에는 크게 가상 라우터와 서브넷의 연결 관계로 구성됩니다. 이는 실제 물리적인 네트워크 환경처럼 라우터 인터페이스에 네트워크 케이블을 꽂는 형식과 유사합니다. 그래서 Neutron 내부에서는 서브넷이 할당된 네트워크에 논리 포트를 만들고 이를 라우터에 연결하게 됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get the existing public network
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">data&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_network_v2&amp;#34; &amp;#34;public_network&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">public_network_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get the existing public router
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">data&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_router_v2&amp;#34; &amp;#34;public_router&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">public_router_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the storage network
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_network_v2&amp;#34; &amp;#34;storage_network&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_network_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the storage subnet
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_subnet_v2&amp;#34; &amp;#34;storage_subnet&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> network_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_network_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_network&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> cidr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet_cidr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> ip_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> dns_nameservers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">dns_nameservers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Connect the storage subnet to the public router
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_router_interface_v2&amp;#34; &amp;#34;storage_router_interface&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> router_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">openstack_networking_router_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">public_router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> subnet_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_subnet_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>서브넷을 라우터에 연결하기 위해서는 &lt;a class="link" href="https://registry.terraform.io/providers/terraform-provider-openstack/openstack/latest/docs" target="_blank" rel="noopener"
>openstack_networking_router_interface_v2&lt;/a>함수를 사용하게 됩니다. 서브넷을 연결할 때 &lt;code>subnet_id&lt;/code>를 사용할 수 있고 &lt;code>port_id&lt;/code>를 사용할 수 있습니다.&lt;/p>
&lt;p>subnet_id를 사용하게 되면 자동으로 해당 CIDR의 x.x.x.1 의 주소의 포트로 연결됩니다. 그러나 하나의 서브넷이 2개 이상일 경우 subnet_id를 두 번이상 사용하게 된다면 사용중인 port IP라는 에러 메세지를 확인할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Subnet_id를 사용하는 방법
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_router_interface_v2&amp;#34; &amp;#34;storage_router_interface&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> router_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">openstack_networking_router_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">public_router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> subnet_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_subnet_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그럴 경우 &lt;a class="link" href="https://registry.terraform.io/providers/terraform-provider-openstack/openstack/latest/docs/resources/networking_port_v2" target="_blank" rel="noopener"
>openstack_networking_port_v2&lt;/a> 에서 사용할 port_ip를 지정해서 사용할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Port를 사용하는 방법
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_port_v2&amp;#34; &amp;#34;storage_kubernetes_router_port&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;kubernetes-storage-port&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> network_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_network_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_network&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> admin_state_up&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fixed_ip&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> subnet_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_subnet_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> ip_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;10.0.50.20&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_router_interface_v2&amp;#34; &amp;#34;storage_kubernetes_interface&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> router_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_router_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">kubernetes_router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_port_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_kubernetes_router_port&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="컴퓨팅-자원">컴퓨팅 자원
&lt;/h4>&lt;p>NFS 서버와 관련된 인스턴스를 제작해보겠습니다.
NFS 서버는 2049, 111 포트를 활용합니다. NFS 서버는 쿠버네티스 서브넷과 주로 통신하므로 Kubernetes subnet인 10.0.10.0/24에서 요청하는 2049, 111 TCP, UDP 네트워크를 모두 허락해줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the NFS security group
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_secgroup_v2&amp;#34; &amp;#34;nfs_secgroup&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;${var.storage_instance_name}-nfs-secgroup&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Security group for NFS access&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_secgroup_rule_v2&amp;#34; &amp;#34;nfs_ingress&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> direction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ingress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> ethertype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;IPv4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> protocol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;tcp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port_range_min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2049&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port_range_max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2049&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> remote_ip_prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;10.0.10.0/24&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> security_group_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_secgroup_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">nfs_secgroup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ... secgroup 일부 생략
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a port in the storage network for the instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_port_v2&amp;#34; &amp;#34;storage_port&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;${var.storage_instance_name}-port&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> network_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_network_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_network&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> security_group_ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">openstack_networking_secgroup_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">nfs_secgroup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fixed_ip&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> subnet_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_subnet_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_subnet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a floating IP for the storage instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_floatingip_v2&amp;#34; &amp;#34;storage_fip&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">public_network_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Associate the floating IP with the storage instance&amp;#39;s port
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_networking_floatingip_associate_v2&amp;#34; &amp;#34;storage_fip_assoc&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> floating_ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_floatingip_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_fip&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_port_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_port&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그리고 50GB 블록 스토리지(Cinder)를 NFS 인스턴스에 붙여서 생성합니다. 인스턴스를 만들때 이전에 정의한 보안 그룹도 지정해줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-hcl" data-lang="hcl">&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_blockstorage_volume_v3&amp;#34; &amp;#34;nfs-volume&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;bfs-volume&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">50&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the storage instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_compute_instance_v2&amp;#34; &amp;#34;storage_instance&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_instance_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> flavor_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_flavor_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> image_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_image_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> key_pair&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_compute_keypair_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">nfs_keypair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> security_groups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">openstack_networking_secgroup_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">nfs_secgroup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">network&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_networking_port_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_port&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> metadata&lt;/span> &lt;span class="o">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> ssh_user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ubuntu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">resource&lt;/span> &lt;span class="s2">&amp;#34;openstack_compute_volume_attach_v2&amp;#34; &amp;#34;nfs-volume-attached&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> instance_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_compute_instance_v2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">storage_instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> volume_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">openstack_blockstorage_volume_v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">nfs&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="k">volume&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>NFS는 Private Network 환경에만 사용합니다. 그러나 nfs 설정 시 외부와의 접근이 필요하므로 floating ip를 할당했습니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="nfs-서버-설정">NFS 서버 설정
&lt;/h2>&lt;h3 id="환경-설정">환경 설정
&lt;/h3>&lt;p>NFS 서버는 50GB 블록 스토리지와 연결된 인스턴스로 이뤄져 있습니다. Horizon에서 인스턴스의 정보를 보면 부착된 볼륨을 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-3.png"
width="483"
height="97"
srcset="https://s0okju.github.io/p/hexactf-2/image-3_hu_f441246ff546ab2e.png 480w, https://s0okju.github.io/p/hexactf-2/image-3_hu_d1495e51d241a717.png 1024w"
loading="lazy"
alt="Horizon에서 확인한 Volume"
class="gallery-image"
data-flex-grow="497"
data-flex-basis="1195px"
>&lt;/p>
&lt;p>ssh에 접속해보면 마운팅된 볼륨을 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-4.png"
width="402"
height="173"
srcset="https://s0okju.github.io/p/hexactf-2/image-4_hu_b3ee19f95f714682.png 480w, https://s0okju.github.io/p/hexactf-2/image-4_hu_1acd0a07b7a1b29d.png 1024w"
loading="lazy"
alt="디스크 정보"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;p>추후 쿠버네티스에서 사용될 모든 데이터는 볼륨 스토리지에 저장할 것입니다. 그러므로 볼륨을 ext4 형태로 포맷하여 &lt;code>/mnt/data&lt;/code> 경로에 마운팅합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-5.png"
width="401"
height="239"
srcset="https://s0okju.github.io/p/hexactf-2/image-5_hu_7c6d75a808f784a2.png 480w, https://s0okju.github.io/p/hexactf-2/image-5_hu_7fa07b74adc3aba.png 1024w"
loading="lazy"
alt="Mounting 이후"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>&lt;code>nfs-server&lt;/code> 라이브러리를 설치한 후 &lt;code>/etc/exports&lt;/code> 파일을 수정합니다. 쿠버네티스 서브넷이 블록 스토리지에 있는 &lt;code>/mnt/data&lt;/code> 에 읽고 쓸 수 있도록 권한을 설정합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/mnt/data 10.0.10.0/24(rw,sync,no_subtree_check)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>자세한 사항은 &lt;a class="link" href="https://dongle94.github.io/ubuntu/ubuntu-nfs-setting/" target="_blank" rel="noopener"
>[Ubuntu] NFS 서버 및 클라이언트 구성 - Dongle’s 개발노트&lt;/a> 를 참고하시길 바랍니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="테스트하기">테스트하기
&lt;/h3>&lt;p>우선 쿠버네티스에서 NFS 서버 IP인 &lt;code>10.0.50.170&lt;/code>가 정상적으로 통신한지 확인합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-6.png"
width="486"
height="205"
srcset="https://s0okju.github.io/p/hexactf-2/image-6_hu_d155203b5275d652.png 480w, https://s0okju.github.io/p/hexactf-2/image-6_hu_d2b0cae3c8e5c27b.png 1024w"
loading="lazy"
alt="Ping Test"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="568px"
>&lt;/p>
&lt;p>NFS 서버에 Hello World 문자열이 있는 &lt;code>test.txt&lt;/code> 파일을 정의합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-7.png"
width="471"
height="160"
srcset="https://s0okju.github.io/p/hexactf-2/image-7_hu_86508c0a3216c6dd.png 480w, https://s0okju.github.io/p/hexactf-2/image-7_hu_201d04b770c861d6.png 1024w"
loading="lazy"
alt="nfs server에서 임시 파일 생성"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="706px"
>&lt;/p>
&lt;p>마운팅에서 확인해보면 데이터가 정상적으로 저장되었음을 확인할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo mount 10.0.50.170:/mnt/server /mnt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-8.png"
width="430"
height="141"
srcset="https://s0okju.github.io/p/hexactf-2/image-8_hu_e745c2b685e4b796.png 480w, https://s0okju.github.io/p/hexactf-2/image-8_hu_390a7c36ead38d0.png 1024w"
loading="lazy"
alt="쿠버네티스 인스턴스에서 NFS 마운팅"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="731px"
>&lt;/p>
&lt;h2 id="활용하기---harbor-in-kubernetes">활용하기 - Harbor in Kubernetes
&lt;/h2>&lt;p>Harbor를 설정하기 이전에 Dynamic provisioner를 설치합니다. &lt;a class="link" href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner#with-helm" target="_blank" rel="noopener"
>nfs-subdir-external-provisioner&lt;/a> 를 사용했으며 helm을 통해 쉽게 설치했습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --set nfs.server&lt;span class="o">=&lt;/span>10.0.50.170 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --set nfs.path&lt;span class="o">=&lt;/span>/mnt/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://jeongchul.tistory.com/728" target="_blank" rel="noopener"
>Harbor Kubernetes Helm 설치 — Jeongchul Kim&lt;/a> 블로그를 참고하여 harbor를 설치했습니다.&lt;/p>&lt;/blockquote>
&lt;p>values.ym의 &lt;code>persistence&lt;/code> 에서 nfs-subdir-external-provisioner에서 생성한 storageClass를 정의합니다. 그리고 실행되면 정상적으로 작동됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-9.png"
width="891"
height="124"
srcset="https://s0okju.github.io/p/hexactf-2/image-9_hu_237f146736854c37.png 480w, https://s0okju.github.io/p/hexactf-2/image-9_hu_f48fab1511c52eed.png 1024w"
loading="lazy"
alt="Harbor PVC 목록"
class="gallery-image"
data-flex-grow="718"
data-flex-basis="1724px"
>&lt;/p>
&lt;p>만약에 설치하다가 아래와 같이 helper program이 필요하다는 에러 메세지를 볼 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Output&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kubelet&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">pods&lt;/span>&lt;span class="o">/.../&lt;/span>&lt;span class="n">volumes&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kubernetes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">nfs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nfs&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">bad&lt;/span> &lt;span class="n">option&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">several&lt;/span> &lt;span class="n">filesystems&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">nfs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cifs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">you&lt;/span> &lt;span class="n">might&lt;/span> &lt;span class="n">need&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">sbin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mount&lt;/span>&lt;span class="o">.&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">helper&lt;/span> &lt;span class="n">program&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>실제로 쿠버네티스에서 Mounting을 할때 &lt;code>mount&lt;/code> 명령어를 사용합니다. 이는 &lt;code>nfs-common&lt;/code> 패키지에 있는 명령어로 노드에 &lt;code>nfs-common&lt;/code> 를 직접 설치해야 합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-2/image-10.png"
width="1774"
height="218"
srcset="https://s0okju.github.io/p/hexactf-2/image-10_hu_147b9e208e0766d3.png 480w, https://s0okju.github.io/p/hexactf-2/image-10_hu_2b2ba354d49931ce.png 1024w"
loading="lazy"
alt="Mounting Error"
class="gallery-image"
data-flex-grow="813"
data-flex-basis="1953px"
>&lt;/p>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>지금까지 NFS를 구축하기 위해 Terraform으로 인프라 환경을 설정하고 인스턴스에 nfs 서버를 설정했습니다. 다음에는 Jenkins 인프라 환경을 구성하고 어떻게 Harbor Registry에 빌드한 도커 이미지를 Push하는지 작성하겠습니다.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://docs.openstack.org/manila/latest/" target="_blank" rel="noopener"
>OpenStack Shared Filesystems (manila) documentation — manila 19.1.0.dev52 documentation&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>HexaCTF - 1. 인프라 플랫폼 선정과 서버 이전 시 마주한 문제</title><link>https://s0okju.github.io/p/hexactf-1/</link><pubDate>Mon, 25 Nov 2024 00:00:00 +0900</pubDate><guid>https://s0okju.github.io/p/hexactf-1/</guid><description>&lt;h2 id="ctf-프로젝트">CTF 프로젝트
&lt;/h2>&lt;p>CTF란 해킹 대회로 참가자가 의도적으로 취약한 프로그램이나 웹사이트에 숨겨진 플래그를 찾는 게임&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>입니다. 대표적인 CTF 사이트로는 &lt;a class="link" href="https://dreamhack.io/" target="_blank" rel="noopener"
>드림핵&lt;/a>이 있습니다.
현재 해킹 동아리 소속으로 주변에 CTF에 활발하게 참가하는 친구들이 많이 있습니다. 저 또한 CTF는 아니지만 문제 제작에 관심이 많습니다. 해킹이라는 관심사를 가진 인원이 모여 CTF에 대한 아이디어를 나누게 되었고, 이후 직접 사이트를 구축하고 대회를 개최하기로 결정했습니다.&lt;/p>
&lt;h2 id="ctf-제작-필수-요소---컨테이너">CTF 제작 필수 요소 - 컨테이너
&lt;/h2>&lt;p>CTF 문제 중에는 호스팅된 취약한 웹사이트가 필요할 수 있고, 취약한 운영체제 환경이 필요할 수 있습니다. 각각 하나의 환경을 구성해서 사용자에게 배포할 수 있습니다. 이럴경우 다른 사용자의 문제 풀이를 알 수 있고 다른 사용자가 발빠르게 문제를 해결하면 다른 사용자는 문제를 풀 수 없게 됩니다. 그렇다면 해킹 대회의 의미가 없어질 것입니다. 문제 환경의 분리가 필요하다고 판단했고 경량화된 실행 환경인 컨테이너를 사용하기로 결정했습니다.&lt;/p>
&lt;h2 id="쿠버네티스">쿠버네티스
&lt;/h2>&lt;p>쿠버네티스는 러닝 커브가 있는 플랫폼입니다. 저 또한 쿠버네티스의 기본 개념만 알지 온전히 사용해본 경험은 없었습니다. 하지만 &lt;strong>컨테이너를 관리한다는 측면에서 쿠버네티스만큼 좋은 플랫폼이 없어서 선택하게 되었습니다.&lt;/strong>&lt;/p>
&lt;p>Python Docker SDK에서 서비스를 개발하고 있을때 제가 고민했던 것이 있었습니다.&lt;/p>
&lt;ol>
&lt;li>30분 후에는 컨테이너를 중단시켜야 하는데 어떻게 해야하지?&lt;/li>
&lt;li>2개 이상의 컨테이너가 필요한 경우에는 어떻게 논리적으로 분리해서 관리하고 모니터링하지?&lt;/li>
&lt;li>Health Check 어떻게 하지?&lt;/li>
&lt;/ol>
&lt;p>모든 고민의 해결방안은 &lt;strong>직접 구현&lt;/strong>해야 한다는 것이었습니다. 직접 구현하는 것보다는 증명된 플랫폼을 활용하는 것이 적절하다고 판단했고 쿠버네티스를 선택하게 되었습니다.&lt;/p>
&lt;h2 id="운영-플랫폼-선정---openstack">운영 플랫폼 선정 - Openstack
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.redhat.com/ko/resources/openstack-platform-datasheet" target="_blank" rel="noopener"
>OpenStack이란&lt;/a>이란 풀링된 가상 리소스를 사용하여 &lt;a class="link" href="https://www.redhat.com/ko/topics/cloud-computing/what-is-private-cloud" target="_blank" rel="noopener"
>프라이빗&lt;/a> 및 &lt;a class="link" href="https://www.redhat.com/ko/topics/cloud-computing/what-is-public-cloud" target="_blank" rel="noopener"
>퍼블릭&lt;/a> 클라우드를 구축하고 관리하는 오픈소스 플랫폼를 뜻합니다.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>
이번 프로젝트에서 인프라 담당을 맡게 되면서 홈서버를 가지고 CTF를 운영하게 되었습니다.
저는 홈서버에 Openstack를 구축하고 활용한 경험이 있습니다. Openstack를 사용하면서 가장 편리했던 부분은 &lt;strong>IaC를 통해 인프라를 쉽게 관리할 수 있다는 점&lt;/strong>이었습니다. 또한 다양한 스토리지 종류가 있으며 역할에 따라 활용할 수 있다는 것도 큰 매력이었습니다.
운영 난이도는 높지만 클라우드만이 가질 수 있는 장점을 활용하고 싶어 Openstack을 선택하게 되었습니다.&lt;/p>
&lt;h2 id="서버-구축---제한된-환경에서-느낀-것">서버 구축 - 제한된 환경에서 느낀 것
&lt;/h2>&lt;p>집에 있는 홈서버를 다른 장소로 이전하게 되었습니다. 이후 Openstack 서버를 현재 환경에 맞게 설정해야 했습니다. 작업에는 네트워크 설정이 큰 비중을 차지했습니다. 설정 과정에서 느낀점을 적어보고자 합니다.&lt;/p>
&lt;h3 id="nat-gateway-의-필요성">NAT Gateway 의 필요성
&lt;/h3>&lt;p>Public Cloud에서 Private Subnet 내에 있는 인스턴스가 인터넷과 접속하기 위해서는 NAT Gateway가 필요합니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-1/image.png"
width="581"
height="510"
srcset="https://s0okju.github.io/p/hexactf-1/image_hu_5f5e5bd567aa439.png 480w, https://s0okju.github.io/p/hexactf-1/image_hu_b68bf485a9687392.png 1024w"
loading="lazy"
alt="출처 - https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/nat-gateway-scenarios.html"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;p>위의 상황과 유사하게 서버의 사설 네트워크 대역에 접근해야 할 일이 있었습니다. 예로 172.19.0.2에 접근하고 싶은데 같은 네트워크 대역에 있지 않으므로 접근할 수 없습니다. 그러나 &lt;code>enp2s0&lt;/code> 네트워크 인터페이스를 NAT로 사용하면 172.19.0.2에 접근할 수 있게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://s0okju.github.io/p/hexactf-1/image-1.png"
width="969"
height="755"
srcset="https://s0okju.github.io/p/hexactf-1/image-1_hu_fed93365860df3c7.png 480w, https://s0okju.github.io/p/hexactf-1/image-1_hu_205f793a9ba41934.png 1024w"
loading="lazy"
alt="구성도"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>서버에 enp2s0가 NAT이며 사설 네트워크인 enp2s0.191에 트래픽을 허용해주는 방화벽 규칙을 추가합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># enp2s0 인터페이스를 통해 나가는 모든 트래픽의 소스에 NAT 수행 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo iptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># enp2s0에 들어와 br-ex로 나가는 ICMP 트래픽을 허용한다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo iptables -A FORWARD -i enp2s0 -o enp2s0.191 -p icmp -j ACCEPT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># br-ex로 들어와서 enp2s0로 나가는 ICMP 트래픽을 허용한다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo iptables -A FORWARD -i enp2s0.191 -o enp2s0 -p icmp -j ACCEPT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Private Subnet 내에 있는 리소스가 외부 인터넷과 통신할 수 있도록 NAT Gateway가 필요합니다.
이는 온프로미스 환경에서도 해당됩니다. 온프로미스 환경에서 사설 네트워크에 접근하기 위해서는 NAT 기능이 필요하며 이는 &lt;strong>공용(Public) 네트워크 인터페이스로 구성&lt;/strong>되어 있어야 합니다. 그래야 외부와 연결하여 통신할 수 있게 됩니다.
Public Cloud에서 NAT Gateway를 Public Subnet에 배치하는 이유도 온프로미스와 동일할 것입니다.&lt;/p>
&lt;p>현재 프로젝트에서는 NAT를 활용하지 않습니다. vlan을 외부 네트워크 인터페이스로 활용하고 싶었으나 실패했습니다. 결국 enp2s0를 Public IP 할당에 사용되는 외부 네트워크 인터페이스(&lt;strong>br-ex&lt;/strong>)로 사용할 것입니다.&lt;/p>
&lt;h3 id="ip-부족">IP 부족
&lt;/h3>&lt;p>&lt;strong>새로운 장소에서 가장 큰 고민거리는 IP Pool 설정&lt;/strong>이었습니다. Openstack은 Floating IP Pool 내에서 외부에 노출할 IP를 할당받게 됩니다. 실제 운영을 위한 IP, 개발을 위한 IP 등 생각보다 IP를 할당받아야 하는 경우가 많습니다.
현재 환경에서는 다양한 서버의 IP가 불규칙적으로 할당되어 있습니다. 또한 많은 사람이 인터넷을 활용하는 공간이기에 무분별하게 IP를 할당할 수 없었습니다.&lt;/p>
&lt;p>꼭 필요한 IP 개수에서 일시적으로 할당받을 것을 고려해 10개를 할당했습니다.&lt;/p>
&lt;ul>
&lt;li>쿠버네티스 : Master, node 2개&lt;/li>
&lt;li>개발 관련 : Jenkins&lt;/li>
&lt;li>기타(일시적) : MySQL 관리용 등등..&lt;/li>
&lt;/ul>
&lt;h2 id="마치며">마치며
&lt;/h2>&lt;p>지금까지 프로젝트가 왜 이러한 플랫폼을 선택했는지 설명했습니다. 또한 서버를 다른 곳에 이전하게 되면서 생긴 경험을 보여드렸습니다.
다음편에는 전체적인 구성도와 함께 찾아오겠습니다.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Capture_the_flag_%28cybersecurity%29" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://www.redhat.com/ko/topics/openstack" target="_blank" rel="noopener"
>https://www.redhat.com/ko/topics/openstack&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>